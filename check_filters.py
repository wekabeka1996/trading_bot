#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —Å–∏–º–≤–æ–ª—ñ–≤ –∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É.
–ì–µ–Ω–µ—Ä—É—î precision map –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —É –±–æ—Ç—ñ.
"""

import json
import os
from binance.client import Client
from binance.exceptions import BinanceAPIException


def check_symbol_filters(client: Client, symbol: str) -> dict:
    """–û—Ç—Ä–∏–º—É—î —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è —Å–∏–º–≤–æ–ª—É."""
    try:
        info = client.futures_exchange_info()
        for s in info['symbols']:
            if s['symbol'] == symbol:
                filters = {}
                for f in s['filters']:
                    filters[f['filterType']] = f
                
                return {
                    'symbol': symbol,
                    'status': s['status'],
                    'lot_size': filters.get('LOT_SIZE', {}),
                    'price_filter': filters.get('PRICE_FILTER', {}),
                    'min_notional': filters.get('MIN_NOTIONAL', {}),
                    'market_lot_size': filters.get('MARKET_LOT_SIZE', {}),
                    'max_num_orders': filters.get('MAX_NUM_ORDERS', {})
                }
    except BinanceAPIException as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è {symbol}: {e}")
        return {'symbol': symbol, 'error': str(e)}
    
    return {'symbol': symbol, 'error': 'Symbol not found'}


def main():
    # –ß–∏—Ç–∞—î–º–æ –ø–ª–∞–Ω
    plan_path = 'data/trading_plan.json'
    if not os.path.exists(plan_path):
        print(f"–ü–ª–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {plan_path}")
        return
    
    with open(plan_path, 'r', encoding='utf-8') as f:
        plan = json.load(f)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–ª—ñ—î–Ω—Ç (–º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ testnet=True –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
    api_key = os.getenv('BINANCE_API_KEY')
    api_secret = os.getenv('BINANCE_API_SECRET')
    
    if not api_key or not api_secret:
        print("BINANCE_API_KEY —Ç–∞ BINANCE_API_SECRET –º–∞—é—Ç—å –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")
        return
    
    client = Client(api_key, api_secret, testnet=True)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∏–º–≤–æ–ª–∏ –∑ –ø–ª–∞–Ω—É
    symbols = [asset['symbol'] for asset in plan.get('active_assets', [])]
    
    print(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª—ñ–≤...")
    print("=" * 80)
    
    results = {}
    
    for symbol in symbols:
        print(f"–ü–µ—Ä–µ–≤—ñ—Ä—è—é {symbol}...")
        filters = check_symbol_filters(client, symbol)
        results[symbol] = filters
        
        if 'error' in filters:
            print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞: {filters['error']}")
        else:
            status = filters['status']
            print(f"  üìä –°—Ç–∞—Ç—É—Å: {status}")
            
            if status != 'TRADING':
                print(f"  ‚õî –£–í–ê–ì–ê: —Å–∏–º–≤–æ–ª –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π!")
            
            lot_size = filters.get('lot_size', {})
            price_filter = filters.get('price_filter', {})
            min_notional = filters.get('min_notional', {})
            
            print(f"  üî¢ LOT_SIZE: stepSize={lot_size.get('stepSize')}, minQty={lot_size.get('minQty')}")
            print(f"  üí∞ PRICE_FILTER: tickSize={price_filter.get('tickSize')}")
            print(f"  üìà MIN_NOTIONAL: minNotional={min_notional.get('minNotional')}")
            print()
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    output_path = 'data/symbol_filters.json'
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {output_path}")
    
    # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–æ–∫
    active_symbols = [s for s, f in results.items() if f.get('status') == 'TRADING']
    inactive_symbols = [s for s, f in results.items() if f.get('status') != 'TRADING']
    
    print(f"\nüìä –ü—ñ–¥—Å—É–º–æ–∫:")
    print(f"  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ —Å–∏–º–≤–æ–ª–∏: {len(active_symbols)}")
    print(f"  ‚õî –ù–µ–∞–∫—Ç–∏–≤–Ω—ñ —Å–∏–º–≤–æ–ª–∏: {len(inactive_symbols)}")
    
    if inactive_symbols:
        print(f"  –ù–µ–∞–∫—Ç–∏–≤–Ω—ñ: {', '.join(inactive_symbols)}")


if __name__ == "__main__":
    main()
