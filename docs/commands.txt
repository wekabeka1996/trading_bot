# Швидкі команди для торгової системи

# ВСТАНОВЛЕННЯ
# ============

# 1. Встановлення залежностей
python -m pip install --upgrade pip
python -m pip install -r requirements.txt

# 2. Первинне налаштування
python setup.py

# 3. Редагування .env файлу
# notepad .env  # Windows
# nano .env     # Linux/Mac

# ЗАПУСК
# ======

# Повний запуск з перевірками
python run.py

# Прямий запуск бота (без перевірок)
python main.py

# Запуск веб-дашборду
streamlit run dashboard.py

# ТЕСТУВАННЯ
# ===========

# Тест ринкових даних
python -c "import asyncio; from market_data import test_market_data; asyncio.run(test_market_data())"

# Тест сповіщень
python -c "import asyncio, json; from notifications import test_notifications; config = json.load(open('config.json')); asyncio.run(test_notifications(config['notifications']))"

# Тест підключення до Binance
python -c "import asyncio; from exchange import BinanceExchange, test_connection; exchange = BinanceExchange('test', 'test', True); asyncio.run(test_connection(exchange))"

# МОНІТОРИНГ
# ==========

# Перегляд логів в реальному часі
tail -f trading_bot.log      # Linux/Mac
Get-Content trading_bot.log -Wait  # Windows PowerShell

# Перевірка активних позицій через API
python -c "from main import TradingBot; bot = TradingBot(); print(bot.positions)"

# БЕЗПЕКА
# =======

# Екстрена зупинка всіх позицій
python -c "import asyncio; from main import TradingBot; bot = TradingBot(); asyncio.run(bot.emergency_close_all())"

# Перевірка балансу
python -c "import asyncio; from exchange import BinanceExchange; e = BinanceExchange('key', 'secret'); asyncio.run(e.get_balance())"

# НАЛАГОДЖЕННЯ
# ============

# Перевірка конфігурації
python -c "import json; config = json.load(open('config.json')); print(json.dumps(config, indent=2))"

# Тест API ключів
python -c "import os; from dotenv import load_dotenv; load_dotenv(); print('API Key:', os.getenv('BINANCE_API_KEY', 'НЕ ЗНАЙДЕНО'))"

# Перевірка дозволів файлів
ls -la *.py *.json  # Linux/Mac
dir *.py, *.json    # Windows

# РЕЗЕРВНЕ КОПІЮВАННЯ
# ===================

# Створення бекапу конфігурації
cp config.json config_backup_$(date +%Y%m%d).json  # Linux/Mac
copy config.json config_backup_%date:~-4,4%%date:~-10,2%%date:~-7,2%.json  # Windows

# Експорт торгової історії
python -c "import json; from main import TradingBot; bot = TradingBot(); print(json.dumps(bot.trade_history, indent=2))" > trade_history.json

# ОНОВЛЕННЯ
# =========

# Оновлення залежностей
python -m pip install --upgrade -r requirements.txt

# Перевірка нових версій CCXT
python -c "import ccxt; print('CCXT version:', ccxt.__version__)"

# ШВИДКІ НАЛАШТУВАННЯ
# ===================

# Увімкнути тільки Telegram сповіщення
python -c "import json; config = json.load(open('config.json')); config['notifications']['telegram']['enabled'] = True; config['notifications']['email']['enabled'] = False; json.dump(config, open('config.json', 'w'), indent=2)"

# Змінити максимальний ризик на 1.5%
python -c "import json; config = json.load(open('config.json')); config['risk_management']['max_portfolio_risk'] = 1.5; json.dump(config, open('config.json', 'w'), indent=2)"

# Увімкнути testnet
python -c "import json; config = json.load(open('config.json')); config['exchange']['testnet'] = True; json.dump(config, open('config.json', 'w'), indent=2)"

# СТАТИСТИКА
# ==========

# Швидкий звіт по прибутковості
python -c "from main import TradingBot; bot = TradingBot(); trades = bot.trade_history; wins = len([t for t in trades if t['realized_pnl'] > 0]); print(f'Прибуткових угод: {wins}/{len(trades)} ({wins/len(trades)*100:.1f}%)' if trades else 'Немає угод')"

# Поточний статус позицій
python -c "from main import TradingBot; bot = TradingBot(); print(f'Активних позицій: {len(bot.positions)}'); [print(f'{k}: ${v[\"size\"]:.2f}') for k,v in bot.positions.items()]"
