"""
üß™ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –û–†–î–ï–†–ê –Ω–∞ Binance Futures Testnet
–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import os
import ccxt
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env
load_dotenv()

def test_real_order():
    """–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    API_KEY = os.getenv('BINANCE_API_KEY')
    API_SECRET = os.getenv('BINANCE_SECRET')
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ exchange
        exchange = ccxt.binance({
            "apiKey": API_KEY,
            "secret": API_SECRET,
            "enableRateLimit": True,
            "sandbox": True,
            "options": {
                "defaultType": "future",
                "adjustForTimeDifference": True,
            }
        })

        print("üß™ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –û–†–î–ï–†–ê")
        print("=" * 40)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å
        balance = exchange.fetch_balance()
        usdt_balance = balance['total'].get('USDT', 0)
        print(f"üí∞ USDT –±–∞–ª–∞–Ω—Å: {usdt_balance}")
        
        if usdt_balance < 10:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ USDT –¥–ª—è —Ç–µ—Å—Ç—É")
            return False
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏–º–≤–æ–ª BTC/USDT
        markets = exchange.load_markets()
        symbol = "BTC/USDT"
        market = markets[symbol]
        
        print(f"\nüìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ {symbol}:")
        print(f"  Min notional: {market['limits']['cost']['min']}")
        print(f"  Min quantity: {market['limits']['amount']['min']}")
        print(f"  Precision amount: {market['precision']['amount']}")
        print(f"  Precision price: {market['precision']['price']}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
        ticker = exchange.fetch_ticker(symbol)
        current_price = ticker['last']
        print(f"  –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${current_price}")
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç—É
        min_notional = market['limits']['cost']['min'] or 5.0
        test_notional = min_notional * 2  # –ë–µ—Ä–µ–º–æ –≤ 2 —Ä–∞–∑–∏ –±—ñ–ª—å—à–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ
        quantity = test_notional / current_price
        
        # –û–∫—Ä—É–≥–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —Ç–æ—á–Ω–æ—Å—Ç—ñ
        precision = market['precision']['amount']
        if precision and precision < 1:
            # –î–ª—è –¥—Ä–æ–±–æ–≤–æ—ó —Ç–æ—á–Ω–æ—Å—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 1e-05) —Ä–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤
            decimal_places = len(str(precision).split('.')[-1].rstrip('0'))
            quantity = round(quantity, decimal_places)
        else:
            # –î–ª—è —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª
            quantity = round(quantity, 5)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–æ 5 –∑–Ω–∞–∫—ñ–≤
        
        print(f"\nüî¨ –¢–ï–°–¢–û–í–ò–ô –û–†–î–ï–†:")
        print(f"  –ù–æ—Ç—ñ–æ–Ω–∞–ª: ${test_notional:.2f}")
        print(f"  –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {quantity}")
        print(f"  –û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ${quantity * current_price:.2f}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –æ—Ä–¥–µ—Ä
        try:
            order = exchange.create_market_buy_order(
                symbol=symbol,
                amount=quantity,
                params={
                    "leverage": 1,  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –ø–ª–µ—á–µ
                    "reduceOnly": False
                }
            )
            
            print(f"\n‚úÖ –û–†–î–ï–† –°–¢–í–û–†–ï–ù–û –£–°–ü–Ü–®–ù–û!")
            print(f"  ID: {order['id']}")
            print(f"  –°—Ç–∞—Ç—É—Å: {order['status']}")
            print(f"  –í–∏–∫–æ–Ω–∞–Ω–æ: {order.get('filled', 0)}")
            print(f"  –ó–∞–ª–∏—à–æ–∫: {order.get('remaining', 0)}")
            
            return True
            
        except Exception as e:
            print(f"\n‚ùå –ü–û–ú–ò–õ–ö–ê –°–¢–í–û–†–ï–ù–ù–Ø –û–†–î–ï–†–ê: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return False

if __name__ == "__main__":
    test_real_order()
