#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É
"""

import os
from datetime import datetime, timedelta
import pytz
from unittest.mock import Mock, MagicMock
from trading_bot.plan_parser import PlanParser
from trading_bot.engine import Engine
from trading_bot.exchange_connector import BinanceFuturesConnector
from trading_bot.notifications import TelegramNotifier
from trading_bot.journal import TradingJournal

def test_plan_execution():
    """–¢–µ—Å—Ç—É—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–ª–∞–Ω—É –∑ –º–æ–∫-–æ–±'—î–∫—Ç–∞–º–∏"""
    
    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –í–ò–ö–û–ù–ê–ù–ù–Ø –¢–û–†–ì–û–í–û–ì–û –ü–õ–ê–ù–£")
    print("=" * 45)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫-–æ–±'—î–∫—Ç–∏
    mock_exchange = Mock(spec=BinanceFuturesConnector)
    mock_exchange.check_connection.return_value = True
    mock_exchange.is_symbol_active.return_value = True
    mock_exchange.get_current_price.return_value = 2000.0
    mock_exchange.get_futures_account_balance.return_value = 10000.0
    mock_exchange.get_free_margin.return_value = 8000.0
    mock_exchange.get_total_balance.return_value = 10000.0
    mock_exchange.get_open_orders.return_value = []
    mock_exchange.get_position_information.return_value = []
    mock_exchange.place_order.return_value = {'orderId': 12345}
    
    mock_notifier = Mock(spec=TelegramNotifier)
    mock_journal = Mock(spec=TradingJournal)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–ª–∞–Ω
    parser = PlanParser('data/trading_plan.json')
    if not parser.load_and_validate():
        print("‚ùå –ü–ª–∞–Ω –Ω–µ –≤–∞–ª—ñ–¥–Ω–∏–π!")
        return False
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ engine
    engine = Engine(
        plan_parser=parser,
        exchange_connector=mock_exchange,
        notifier=mock_notifier,
        journal=mock_journal
    )
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    if not engine._initial_setup():
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó!")
        return False
    
    print("‚úÖ Engine —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    print(f"üìã –ü–ª–∞–Ω: {engine.plan.plan_type}")
    print(f"üìä –ê–∫—Ç–∏–≤—ñ–≤: {len(engine.plan.active_assets)}")
    print()
    
    # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–∞–∑–∏
    print("üïê –¢–ï–°–¢–£–í–ê–ù–ù–Ø –¢–û–†–ì–û–í–ò–• –§–ê–ó:")
    print("-" * 30)
    
    # –ú–æ–¥–µ–ª—é—î–º–æ —á–∞—Å–∏ –∑ –ø–ª–∞–Ω—É (–ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ)
    kiev_tz = pytz.timezone('Europe/Kiev')
    today = datetime.now(kiev_tz).date()
    
    test_phases = [
        ("14:25", "pre_macro_check"),
        ("14:30", "macro_release"), 
        ("14:35", "setup_orders"),
        ("15:00", "monitor_arb"),
        ("16:00", "sol_activation"),
        ("19:00", "cancel_unfilled"),
        ("23:00", "end_of_day")
    ]
    
    for time_str, phase_name in test_phases:
        hour, minute = map(int, time_str.split(':'))
        test_time = kiev_tz.localize(
            datetime.combine(today, datetime.min.time())
        ).replace(hour=hour, minute=minute).astimezone(pytz.utc)
        
        print(f"‚è∞ {time_str} ({phase_name})")
        
        # –°–∏–º—É–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
        original_executed = engine.executed_phases.copy()
        engine.executed_phases.clear()
        
        try:
            engine._process_trade_phases(test_time)
            
            if phase_name in engine.executed_phases:
                print(f"   ‚úÖ –§–∞–∑–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞")
            else:
                print(f"   ‚ùå –§–∞–∑–∞ –ù–ï –≤–∏–∫–æ–Ω–∞–Ω–∞")
                
        except Exception as e:
            print(f"   üí• –ü–æ–º–∏–ª–∫–∞: {e}")
        
        engine.executed_phases = original_executed
        print()
    
    # –¢–µ—Å—Ç—É—î–º–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è OCO –æ—Ä–¥–µ—Ä—ñ–≤
    print("üìà –¢–ï–°–¢–£–í–ê–ù–ù–Ø OCO –û–†–î–ï–†–Ü–í:")
    print("-" * 25)
    
    try:
        current_time = datetime.now(pytz.utc)
        
        for asset in engine.plan.active_assets:
            print(f"üîç –¢–µ—Å—Ç—É—é {asset.symbol}")
            
            if asset.strategy == "oco_breakout":
                bullish_group = asset.order_groups.get("bullish")
                bearish_group = asset.order_groups.get("bearish")
                
                if bullish_group and bearish_group:
                    try:
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —á–∞—Å—É
                        valid_bullish = engine._should_execute_order_group(bullish_group, current_time)
                        valid_bearish = engine._should_execute_order_group(bearish_group, current_time)
                        
                        print(f"   ‚è∞ –ß–∞—Å –≤–∞–ª—ñ–¥–Ω–∏–π bullish: {valid_bullish}")
                        print(f"   ‚è∞ –ß–∞—Å –≤–∞–ª—ñ–¥–Ω–∏–π bearish: {valid_bearish}")
                        
                        if valid_bullish or valid_bearish:
                            # –°–∏–º—É–ª—é—î–º–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
                            engine._place_oco_breakout_orders(asset)
                            print(f"   ‚úÖ OCO –æ—Ä–¥–µ—Ä–∏ —Ä–æ–∑–º—ñ—â–µ–Ω—ñ")
                        else:
                            print(f"   ‚è∞ –ß–∞—Å –¥–ª—è –æ—Ä–¥–µ—Ä—ñ–≤ —â–µ –Ω–µ –Ω–∞—Å—Ç–∞–≤")
                            
                    except Exception as e:
                        print(f"   üí• –ü–æ–º–∏–ª–∫–∞ OCO: {e}")
                else:
                    print(f"   ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ bullish/bearish –≥—Ä—É–ø–∏")
            else:
                print(f"   ‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥—ñ—è {asset.strategy} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è")
            print()
            
    except Exception as e:
        print(f"üí• –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ OCO: {e}")
    
    # –¢–µ—Å—Ç—É—î–º–æ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
    print("‚ö° –¢–ï–°–¢–£–í–ê–ù–ù–Ø –†–ò–ó–ò–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–£:")
    print("-" * 30)
    
    try:
        if engine.risk_manager:
            engine.risk_manager.update_equity()
            print("‚úÖ –ö–∞–ø—ñ—Ç–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –¢–µ—Å—Ç—É—î–º–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó
            for asset in engine.plan.active_assets:
                bullish_group = asset.order_groups.get("bullish")
                if bullish_group:
                    size = engine.risk_manager.calculate_position_size(asset, bullish_group)
                    if size and size > 0:
                        print(f"‚úÖ {asset.symbol}: —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó {size}")
                    else:
                        print(f"‚ùå {asset.symbol}: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä")
        else:
            print("‚ùå Risk Manager –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            
    except Exception as e:
        print(f"üí• –ü–æ–º–∏–ª–∫–∞ —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É: {e}")
    
    print()
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("üìã –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print("-" * 25)
    
    success_points = []
    issues = []
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if engine.plan and engine.risk_manager:
        success_points.append("‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è successful")
    else:
        issues.append("‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–ª–∞–Ω—É
    if parser.load_and_validate():
        success_points.append("‚úÖ –ü–ª–∞–Ω –≤–∞–ª—ñ–¥–Ω–∏–π")
    else:
        issues.append("‚ùå –ü–ª–∞–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ OCO —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
    oco_count = sum(1 for asset in engine.plan.active_assets 
                    if asset.strategy == "oco_breakout" and 
                    asset.order_groups.get("bullish") and 
                    asset.order_groups.get("bearish"))
    
    if oco_count == len(engine.plan.active_assets):
        success_points.append(f"‚úÖ –í—Å—ñ {oco_count} –∞–∫—Ç–∏–≤—ñ–≤ –º–∞—é—Ç—å –ø–æ–≤–Ω—ñ OCO –≥—Ä—É–ø–∏")
    else:
        issues.append(f"‚ùå –ù–µ –≤—Å—ñ –∞–∫—Ç–∏–≤–∏ –º–∞—é—Ç—å –ø–æ–≤–Ω—ñ OCO –≥—Ä—É–ø–∏")
    
    print("üéØ –£–°–ü–Ü–•–ò:")
    for point in success_points:
        print(f"   {point}")
    
    if issues:
        print("\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ò:")
        for issue in issues:
            print(f"   {issue}")
    
    overall_success = len(issues) == 0
    print(f"\nüèÜ –ó–ê–ì–ê–õ–¨–ù–ê –û–¶–Ü–ù–ö–ê: {'‚úÖ –í–Ü–î–ú–Ü–ù–ù–û' if overall_success else '‚ö†Ô∏è –ü–û–¢–†–ï–ë–£–Ñ –£–í–ê–ì–ò'}")
    
    return overall_success

if __name__ == "__main__":
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
    os.environ['EQUITY_OVERRIDE'] = '10000.0'
    
    success = test_plan_execution()
    
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–ª–∞–Ω {'–ì–û–¢–û–í–ò–ô –î–û –í–ò–ö–û–ù–ê–ù–ù–Ø' if success else '–ü–û–¢–†–ï–ë–£–Ñ –î–û–û–ü–†–ê–¶–Æ–í–ê–ù–¨'}")
