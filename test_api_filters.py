#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ API Binance
"""
import sys
import json
import os
from dotenv import load_dotenv
sys.path.append('c:/trading_bot')

from trading_bot.exchange_connector import BinanceFuturesConnector

def test_api_filters():
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
        load_dotenv()
        
        use_testnet = os.getenv("BINANCE_TESTNET", "false").lower() == "true"
        
        if use_testnet:
            api_key = os.getenv("BINANCE_TESTNET_API_KEY")
            api_secret = os.getenv("BINANCE_TESTNET_SECRET")
            print("üß™ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è TESTNET —Ä–µ–∂–∏–º")
        else:
            api_key = os.getenv("BINANCE_API_KEY")
            api_secret = os.getenv("BINANCE_SECRET")
            print("üí∞ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è MAINNET —Ä–µ–∂–∏–º")
        
        if not api_key or not api_secret:
            print("‚ùå API –∫–ª—é—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ!")
            return
            
        print("üîç –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance...")
        exchange = BinanceFuturesConnector(api_key, api_secret, testnet=use_testnet)
        
        print("üìä –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±—ñ—Ä–∂—É...")
        info = exchange.client.futures_exchange_info()
        
        print("üîé –®—É–∫–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–ª—è PLAYUSDT...")
        for symbol_info in info['symbols']:
            if symbol_info['symbol'] == 'PLAYUSDT':
                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ PLAYUSDT –Ω–∞ {'MAINNET' if not exchange.testnet else 'TESTNET'}")
                print("üìã –§—ñ–ª—å—Ç—Ä–∏:")
                
                for f in symbol_info['filters']:
                    if 'NOTIONAL' in f['filterType']:
                        print(f"  üéØ {f['filterType']}:")
                        print(f"     –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {json.dumps(f, indent=6)}")
                        print(f"     –ö–ª—é—á—ñ: {list(f.keys())}")
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—ñ –∫–ª—é—á—ñ —ñ—Å–Ω—É—é—Ç—å
                        if 'minNotional' in f:
                            print(f"     ‚úÖ minNotional: {f['minNotional']}")
                        if 'notional' in f:
                            print(f"     ‚úÖ notional: {f['notional']}")
                break
        else:
            print("‚ùå PLAYUSDT –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_api_filters()
