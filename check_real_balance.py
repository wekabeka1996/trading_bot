#!/usr/bin/env python3
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É –Ω–∞ Binance Futures

from dotenv import load_dotenv
import os
from trading_bot.exchange_connector import BinanceFuturesConnector

def main():
    load_dotenv()
    use_testnet = os.getenv('BINANCE_TESTNET', 'false').lower() == 'true'
    api_key = os.getenv('BINANCE_API_KEY')
    api_secret = os.getenv('BINANCE_SECRET')
    equity_override = os.getenv('EQUITY_OVERRIDE')

    mode = 'TESTNET' if use_testnet else 'MAINNET (–†–ï–ê–õ–¨–ù–Ü –ì–†–û–®–Ü!)'
    print(f'üéØ –†–µ–∂–∏–º: {mode}')
    print(f'üîë API –∫–ª—é—á: {api_key[:10]}...')
    
    if equity_override:
        print(f'‚ö†Ô∏è –£–í–ê–ì–ê: –ê–∫—Ç–∏–≤–Ω–∞ –µ–º—É–ª—è—Ü—ñ—è –∫–∞–ø—ñ—Ç–∞–ª—É: ${equity_override}')
        print('   –î–ª—è —Ä–µ–∞–ª—å–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ –≤–∏–¥–∞–ª—ñ—Ç—å EQUITY_OVERRIDE –∑ .env')
    else:
        print('‚úÖ –ï–º—É–ª—è—Ü—ñ—è –∫–∞–ø—ñ—Ç–∞–ª—É –í–ò–ú–ö–ù–ï–ù–ê - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ä–µ–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å')

    try:
        exchange = BinanceFuturesConnector(api_key, api_secret, testnet=use_testnet)
        
        if exchange.check_connection():
            print('\n‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance API —É—Å–ø—ñ—à–Ω–µ')
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å
            balance = exchange.get_futures_account_balance()
            print(f'üí∞ Futures –±–∞–ª–∞–Ω—Å: ${balance:.2f} USDT')
            
            # –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–∫–∞—É–Ω—Ç
            account_info = exchange.client.futures_account()
            available_balance = float(account_info['availableBalance'])
            total_balance = float(account_info['totalWalletBalance'])
            
            print(f'üìä –í—ñ–ª—å–Ω–∞ –º–∞—Ä–∂–∞: ${available_balance:.2f}')
            print(f'üìà –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${total_balance:.2f}')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —á–∏ —î –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó
            positions = exchange.get_position_information()
            open_positions = [p for p in positions if float(p['positionAmt']) != 0]
            
            if open_positions:
                print(f'\n‚ö†Ô∏è –í–Ü–î–ö–†–ò–¢–Ü –ü–û–ó–ò–¶–Ü–á ({len(open_positions)}):')
                for pos in open_positions:
                    symbol = pos['symbol']
                    amount = float(pos['positionAmt'])
                    entry_price = float(pos['entryPrice'])
                    pnl = float(pos['unRealizedPnl'])
                    side = 'LONG' if amount > 0 else 'SHORT'
                    print(f'   {symbol}: {side} {abs(amount):.4f} @ ${entry_price:.4f} (PnL: ${pnl:.2f})')
            else:
                print('\n‚úÖ –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π')
                
        else:
            print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance API')
            
    except Exception as e:
        print(f'‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}')

if __name__ == '__main__':
    main()
