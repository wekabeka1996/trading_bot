# –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É
import asyncio
import logging
from typing import Dict, List, Optional
from dataclasses import dataclass
from datetime import datetime, timedelta
import numpy as np

logger = logging.getLogger(__name__)

@dataclass
class RiskMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ —Ä–∏–∑–∏–∫—É"""
    portfolio_var: float  # Value at Risk
    max_drawdown: float   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –ø—Ä–æ—Å–∞–¥–∫–∞
    sharpe_ratio: float   # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –®–∞—Ä–ø–∞
    total_exposure: float # –ó–∞–≥–∞–ª—å–Ω–∞ –µ–∫—Å–ø–æ–∑–∏—Ü—ñ—è
    correlation_risk: float # –†–∏–∑–∏–∫ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó

@dataclass
class PositionRisk:
    """–†–∏–∑–∏–∫ –ø–æ–∑–∏—Ü—ñ—ó"""
    symbol: str
    size: float
    risk_percent: float
    leverage: float
    stop_loss_distance: float
    max_loss_usd: float

class RiskManager:
    def __init__(self, portfolio_size: float, max_portfolio_risk: float = 2.5):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
        
        Args:
            portfolio_size: –†–æ–∑–º—ñ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ USD
            max_portfolio_risk: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–∏–∑–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è (%)
        """
        self.portfolio_size = portfolio_size
        self.max_portfolio_risk = max_portfolio_risk
        self.positions = {}
        self.trade_history = []
        self.equity_curve = []
        
        logger.info(f"üíº –†–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–µ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: ${portfolio_size}, –º–∞–∫—Å. —Ä–∏–∑–∏–∫ {max_portfolio_risk}%")
    
    async def validate_new_position(self, symbol: str, size: float, leverage: float, 
                                  stop_loss_percent: float) -> tuple[bool, str]:
        """
        –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –ø–µ—Ä–µ–¥ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è–º
        
        Returns:
            (–º–æ–∂–Ω–∞_–≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏, –ø—Ä–∏—á–∏–Ω–∞_—è–∫—â–æ_–Ω—ñ)
        """
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–∏–∑–∏–∫—É –ø–æ–∑–∏—Ü—ñ—ó
        position_risk = PositionRisk(
            symbol=symbol,
            size=size,
            risk_percent=(size / self.portfolio_size) * 100,
            leverage=leverage,
            stop_loss_distance=abs(stop_loss_percent),
            max_loss_usd=size * abs(stop_loss_percent) / 100 * leverage
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 1: –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó
        if position_risk.risk_percent > 25.0:  # –ú–∞–∫—Å–∏–º—É–º 25% –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ –æ–¥–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó
            return False, f"–ü–æ–∑–∏—Ü—ñ—è –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞: {position_risk.risk_percent:.1f}% > 25%"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 2: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –∑–±–∏—Ç–æ–∫
        if position_risk.max_loss_usd > (self.portfolio_size * 0.05):  # –ú–∞–∫—Å–∏–º—É–º 5% –Ω–∞ –ø–æ–∑–∏—Ü—ñ—é
            return False, f"–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –∑–±–∏—Ç–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π: ${position_risk.max_loss_usd:.2f}"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 3: –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–∏–∑–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        current_var = await self.calculate_portfolio_var()
        projected_var = current_var + (position_risk.max_loss_usd / self.portfolio_size * 100)
        
        if projected_var > self.max_portfolio_risk:
            return False, f"–ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤ VaR: {projected_var:.2f}% > {self.max_portfolio_risk}%"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 4: –ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∏–π —Ä–∏–∑–∏–∫
        correlation_risk = await self.calculate_correlation_risk(symbol)
        if correlation_risk > 0.8:  # –í–∏—Å–æ–∫–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—è –∑ —ñ—Å–Ω—É—é—á–∏–º–∏ –ø–æ–∑–∏—Ü—ñ—è–º–∏
            return False, f"–í–∏—Å–æ–∫–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—è –∑ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º: {correlation_risk:.2f}"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 5: –ö—Ä–µ–¥–∏—Ç–Ω–µ –ø–ª–µ—á–µ
        if leverage > 5.0:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –ø–ª–µ—á–µ 5x
            return False, f"–ó–∞–Ω–∞–¥—Ç–æ –≤–∏—Å–æ–∫–µ –ø–ª–µ—á–µ: {leverage}x > 5x"
        
        logger.info(f"‚úÖ –ü–æ–∑–∏—Ü—ñ—è {symbol} –ø—Ä–æ–π—à–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é: —Ä–∏–∑–∏–∫ {position_risk.risk_percent:.1f}%")
        return True, "OK"
    
    async def calculate_portfolio_var(self, confidence_level: float = 0.95) -> float:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Value at Risk –ø–æ—Ä—Ç—Ñ–µ–ª—è
        
        Args:
            confidence_level: –†—ñ–≤–µ–Ω—å –¥–æ–≤—ñ—Ä–∏ (0.95 = 95%)
        
        Returns:
            VaR —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö –≤—ñ–¥ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        """
        if not self.positions:
            return 0.0
        
        total_risk = 0.0
        for position in self.positions.values():
            position_var = position['size'] * position['leverage'] * position['volatility']
            total_risk += position_var ** 2
        
        portfolio_var = np.sqrt(total_risk) / self.portfolio_size * 100
        return portfolio_var
    
    async def calculate_correlation_risk(self, new_symbol: str) -> float:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–∏–∑–∏–∫—É –∫–æ—Ä–µ–ª—è—Ü—ñ—ó –∑ —ñ—Å–Ω—É—é—á–∏–º–∏ –ø–æ–∑–∏—Ü—ñ—è–º–∏
        
        Returns:
            –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—è –∑ —ñ—Å–Ω—É—é—á–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏ (0-1)
        """
        if not self.positions:
            return 0.0
        
        # –°–ø—Ä–æ—â–µ–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞ –±–∞–∑—ñ —Å–µ–∫—Ç–æ—Ä—ñ–≤
        sector_correlations = {
            'DEFI': ['UMA', 'API3', 'PENDLE', 'LDO'],
            'SOLANA': ['FIDA', 'RAY', 'SRM'],
            'AI_GAMING': ['RNDR', 'FET', 'OCEAN'],
            'INFRASTRUCTURE': ['DIA', 'GRT', 'LINK']
        }
        
        new_sector = None
        for sector, tokens in sector_correlations.items():
            if any(token in new_symbol for token in tokens):
                new_sector = sector
                break
        
        if not new_sector:
            return 0.0  # –ù–µ–≤—ñ–¥–æ–º–∏–π —Å–µ–∫—Ç–æ—Ä = –Ω–∏–∑—å–∫–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—è
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤–∂–µ –ø–æ–∑–∏—Ü—ñ—ó –∑ —Ç–æ–≥–æ –∂ —Å–µ–∫—Ç–æ—Ä–∞
        same_sector_exposure = 0.0
        for symbol, position in self.positions.items():
            for sector, tokens in sector_correlations.items():
                if sector == new_sector and any(token in symbol for token in tokens):
                    same_sector_exposure += position['size']
        
        # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–æ 0-1
        correlation = min(same_sector_exposure / self.portfolio_size, 1.0)
        return correlation
    
    async def calculate_position_size(self, symbol: str, risk_percent: float, 
                                    stop_loss_percent: float, leverage: float = 1.0) -> float:
        """
        –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –±–∞–∑—ñ —Ä–∏–∑–∏–∫—É
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞ –ø–∞—Ä–∞
            risk_percent: –ë–∞–∂–∞–Ω–∏–π —Ä–∏–∑–∏–∫ (% –≤—ñ–¥ –ø–æ—Ä—Ç—Ñ–µ–ª—è)
            stop_loss_percent: –í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (%)
            leverage: –ö—Ä–µ–¥–∏—Ç–Ω–µ –ø–ª–µ—á–µ
        
        Returns:
            –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó –≤ USD
        """
        # –§–æ—Ä–º—É–ª–∞: Position Size = (Portfolio * Risk%) / (Stop Loss% * Leverage)
        max_risk_usd = self.portfolio_size * (risk_percent / 100)
        position_size = max_risk_usd / (abs(stop_loss_percent) / 100)
        
        # –ö–æ—Ä–∏–≥—É—î–º–æ –Ω–∞ –∫—Ä–µ–¥–∏—Ç–Ω–µ –ø–ª–µ—á–µ
        position_size = position_size / leverage
        
        # –ù–µ –±—ñ–ª—å—à–µ 25% –ø–æ—Ä—Ç—Ñ–µ–ª—è
        max_position = self.portfolio_size * 0.25
        position_size = min(position_size, max_position)
        
        logger.debug(f"üìä –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó {symbol}: ${position_size:.2f} (—Ä–∏–∑–∏–∫ {risk_percent}%)")
        return position_size
    
    async def emergency_risk_check(self) -> tuple[bool, List[str]]:
        """
        –ï–∫—Å—Ç—Ä–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∏–∑–∏–∫—ñ–≤
        
        Returns:
            (–ø–æ—Ç—Ä—ñ–±–Ω–∞_–µ–∫—Å—Ç—Ä–µ–Ω–∞_–¥—ñ—è, —Å–ø–∏—Å–æ–∫_–ø—Ä–∏—á–∏–Ω)
        """
        emergency_actions = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 1: –ó–∞–≥–∞–ª—å–Ω–∏–π VaR
        current_var = await self.calculate_portfolio_var()
        if current_var > self.max_portfolio_risk * 1.5:  # 150% –≤—ñ–¥ –ª—ñ–º—ñ—Ç—É
            emergency_actions.append(f"–ö—Ä–∏—Ç–∏—á–Ω–∏–π VaR: {current_var:.2f}%")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 2: –ü—Ä–æ—Å–∞–¥–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        current_drawdown = await self.calculate_current_drawdown()
        if current_drawdown > 15.0:  # –ü—Ä–æ—Å–∞–¥–∫–∞ –±—ñ–ª—å—à–µ 15%
            emergency_actions.append(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø—Ä–æ—Å–∞–¥–∫–∞: {current_drawdown:.2f}%")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 3: –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è —Ä–∏–∑–∏–∫—É
        max_position_risk = max([pos['size'] / self.portfolio_size * 100 
                               for pos in self.positions.values()], default=0)
        if max_position_risk > 35.0:  # –û–¥–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –±—ñ–ª—å—à–µ 35%
            emergency_actions.append(f"–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è —Ä–∏–∑–∏–∫—É: {max_position_risk:.1f}%")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 4: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–∏—Ç–∫–æ–≤–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
        losing_positions = len([pos for pos in self.positions.values() 
                              if pos.get('unrealized_pnl', 0) < -5.0])
        if losing_positions >= 3:  # 3+ –ø–æ–∑–∏—Ü—ñ—ó –≤ –º—ñ–Ω—É—Å—ñ –±—ñ–ª—å—à–µ 5%
            emergency_actions.append(f"–ú–Ω–æ–∂–∏–Ω–Ω—ñ –∑–±–∏—Ç–∫–∏: {losing_positions} –ø–æ–∑–∏—Ü—ñ–π")
        
        return len(emergency_actions) > 0, emergency_actions
    
    async def calculate_current_drawdown(self) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ—Ç–æ—á–Ω–æ—ó –ø—Ä–æ—Å–∞–¥–∫–∏"""
        if len(self.equity_curve) < 2:
            return 0.0
        
        peak = max(self.equity_curve)
        current = self.equity_curve[-1]
        drawdown = ((peak - current) / peak) * 100
        return max(drawdown, 0.0)
    
    async def update_position(self, symbol: str, current_price: float, unrealized_pnl: float):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–∑–∏—Ü—ñ—é"""
        if symbol in self.positions:
            self.positions[symbol].update({
                'current_price': current_price,
                'unrealized_pnl': unrealized_pnl,
                'last_update': datetime.now()
            })
    
    async def close_position(self, symbol: str, exit_price: float, realized_pnl: float):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if symbol in self.positions:
            position = self.positions.pop(symbol)
            
            # –î–æ–¥–∞—î–º–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
            trade_record = {
                'symbol': symbol,
                'entry_time': position['entry_time'],
                'exit_time': datetime.now(),
                'entry_price': position['entry_price'],
                'exit_price': exit_price,
                'size': position['size'],
                'realized_pnl': realized_pnl,
                'pnl_percent': (realized_pnl / position['size']) * 100
            }
            
            self.trade_history.append(trade_record)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–∏–≤—É –±–∞–ª–∞–Ω—Å—É
            current_equity = self.portfolio_size + sum([t['realized_pnl'] for t in self.trade_history])
            self.equity_curve.append(current_equity)
            
            logger.info(f"üìà –ü–æ–∑–∏—Ü—ñ—é {symbol} –∑–∞–∫—Ä–∏—Ç–æ: P&L ${realized_pnl:.2f}")
    
    async def get_risk_report(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É –ø–æ —Ä–∏–∑–∏–∫–∞—Ö"""
        metrics = await self.calculate_risk_metrics()
        
        return {
            'timestamp': datetime.now().isoformat(),
            'portfolio_size': self.portfolio_size,
            'active_positions': len(self.positions),
            'total_exposure': sum([pos['size'] for pos in self.positions.values()]),
            'var_percent': metrics.portfolio_var,
            'max_drawdown': metrics.max_drawdown,
            'sharpe_ratio': metrics.sharpe_ratio,
            'correlation_risk': metrics.correlation_risk,
            'positions': list(self.positions.keys()),
            'emergency_status': await self.emergency_risk_check()
        }
    
    async def calculate_risk_metrics(self) -> RiskMetrics:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—Å—ñ—Ö –º–µ—Ç—Ä–∏–∫ —Ä–∏–∑–∏–∫—É"""
        portfolio_var = await self.calculate_portfolio_var()
        max_drawdown = await self.calculate_current_drawdown()
        
        # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –®–∞—Ä–ø–∞ (—Å–ø—Ä–æ—â–µ–Ω–∏–π)
        if len(self.trade_history) > 0:
            returns = [t['pnl_percent'] for t in self.trade_history]
            mean_return = np.mean(returns)
            std_return = np.std(returns)
            sharpe_ratio = mean_return / std_return if std_return > 0 else 0.0
        else:
            sharpe_ratio = 0.0
        
        total_exposure = sum([pos['size'] * pos.get('leverage', 1) for pos in self.positions.values()])
        
        # –°–µ—Ä–µ–¥–Ω—è –∫–æ—Ä–µ–ª—è—Ü—ñ—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
        correlations = []
        symbols = list(self.positions.keys())
        for symbol in symbols:
            corr = await self.calculate_correlation_risk(symbol)
            correlations.append(corr)
        
        correlation_risk = np.mean(correlations) if correlations else 0.0
        
        return RiskMetrics(
            portfolio_var=portfolio_var,
            max_drawdown=max_drawdown,
            sharpe_ratio=sharpe_ratio,
            total_exposure=total_exposure,
            correlation_risk=correlation_risk
        )
