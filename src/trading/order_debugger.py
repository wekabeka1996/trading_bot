"""
üîß ORDER DEBUGGER
–î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ä–¥–µ—Ä—ñ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
"""

import logging
from typing import Dict, Optional, Any
import asyncio
from datetime import datetime

logger = logging.getLogger(__name__)

class OrderDebugger:
    """–ö–ª–∞—Å –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤"""
    
    def __init__(self, exchange=None):
        self.exchange = exchange
        self.order_history = []
        
    def debug_create_order(self, symbol: str, side: str, amount: float, price: float = None, order_type: str = "market") -> Dict[str, Any]:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ –∑ –ø–æ–≤–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –≤—Å—ñ—Ö –µ—Ç–∞–ø—ñ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        """
        try:
            logger.info(f"[ORDER_DEBUG] –ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞:")
            logger.info(f"  Symbol: {symbol}")
            logger.info(f"  Side: {side}")
            logger.info(f"  Amount: {amount}")
            logger.info(f"  Price: {price}")
            logger.info(f"  Type: {order_type}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ
            if not self.exchange:
                logger.error("[ORDER_DEBUG] Exchange –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π!")
                return {"error": "No exchange connection"}
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            try:
                balance = self.exchange.fetch_balance()
                logger.info(f"[ORDER_DEBUG] –ë–∞–ª–∞–Ω—Å USDT: {balance.get('USDT', {}).get('free', 0)}")
            except Exception as e:
                logger.warning(f"[ORDER_DEBUG] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å: {e}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏—Ö –≤–∏–º–æ–≥ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é)
            try:
                markets = self.exchange.load_markets()
                market = markets.get(symbol)
                if market:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –≤–∏–º–æ–≥–∏
                    min_notional = market.get('limits', {}).get('cost', {}).get('min', 5.0)
                    min_amount = market.get('limits', {}).get('amount', {}).get('min', 0.001)
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ—á–Ω—ñ—Å—Ç—å
                    amount_precision = market.get('precision', {}).get('amount', 3)
                    
                    current_price = self.exchange.fetch_ticker(symbol)
                    market_price = current_price['last']
                    notional = amount * market_price
                    
                    logger.info(f"[ORDER_DEBUG] –ú—ñ–Ω. –Ω–æ—Ç—ñ–æ–Ω–∞–ª: {min_notional}")
                    logger.info(f"[ORDER_DEBUG] –ú—ñ–Ω. –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {min_amount}")
                    logger.info(f"[ORDER_DEBUG] –¢–æ—á–Ω—ñ—Å—Ç—å: {amount_precision}")
                    logger.info(f"[ORDER_DEBUG] –ü–æ—Ç–æ—á–Ω–∏–π –Ω–æ—Ç—ñ–æ–Ω–∞–ª: {notional}")
                    logger.info(f"[ORDER_DEBUG] –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {amount}")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
                    if amount < min_amount:
                        logger.error(f"[ORDER_DEBUG] –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞: {amount} < {min_amount}")
                        return {"error": "MIN_AMOUNT"}
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –Ω–æ—Ç—ñ–æ–Ω–∞–ª—É
                    if notional < min_notional:
                        logger.error(f"[ORDER_DEBUG] –ù–æ—Ç—ñ–æ–Ω–∞–ª –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π: {notional} < {min_notional}")
                        return {"error": "MIN_NOTIONAL"}
                        
                    # –û–∫—Ä—É–≥–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —Ç–æ—á–Ω–æ—Å—Ç—ñ
                    if amount_precision:
                        if isinstance(amount_precision, float) and amount_precision < 1:
                            # –Ø–∫—â–æ —Ç–æ—á–Ω—ñ—Å—Ç—å —è–∫ 1e-05, —Ä–∞—Ö—É—î–º–æ decimal places
                            import math
                            decimal_places = abs(int(math.log10(amount_precision)))
                            amount = round(amount, decimal_places)
                        else:
                            # –Ø–∫—â–æ —Ü—ñ–ª–µ —á–∏—Å–ª–æ —Ç–æ—á–Ω–æ—Å—Ç—ñ
                            amount = round(amount, int(amount_precision))
                    
                    logger.info(f"[ORDER_DEBUG] –û–∫—Ä—É–≥–ª–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {amount}")
                        
            except Exception as e:
                logger.warning(f"[ORDER_DEBUG] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª—ñ–º—ñ—Ç–∏: {e}")
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            order_result = None
            if order_type == "market":
                if side == "buy":
                    order_result = self.exchange.create_market_buy_order(symbol, amount)
                else:
                    order_result = self.exchange.create_market_sell_order(symbol, amount)
            elif order_type == "limit":
                order_result = self.exchange.create_limit_order(symbol, side, amount, price)
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            if order_result:
                logger.info(f"[ORDER_SUCCESS] –û—Ä–¥–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ:")
                logger.info(f"  ID: {order_result.get('id')}")
                logger.info(f"  Status: {order_result.get('status')}")
                logger.info(f"  Filled: {order_result.get('filled', 0)}")
                logger.info(f"  Remaining: {order_result.get('remaining', 0)}")
                logger.info(f"  Fee: {order_result.get('fee')}")
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
                self.order_history.append({
                    "timestamp": datetime.now(),
                    "symbol": symbol,
                    "side": side,
                    "amount": amount,
                    "price": price,
                    "order_type": order_type,
                    "result": order_result,
                    "success": True
                })
                
                return order_result
            else:
                logger.error("[ORDER_DEBUG] –û—Ä–¥–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ None!")
                return {"error": "NULL_RESULT"}
                
        except Exception as e:
            logger.error(f"[ORDER_ERROR] –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞: {e}")
            logger.error(f"[ORDER_ERROR] Type: {type(e).__name__}")
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –≤ —ñ—Å—Ç–æ—Ä—ñ—é
            self.order_history.append({
                "timestamp": datetime.now(),
                "symbol": symbol,
                "side": side,
                "amount": amount,
                "price": price,
                "order_type": order_type,
                "error": str(e),
                "success": False
            })
            
            return {"error": str(e)}
    
    async def check_order_status(self, order_id: str, symbol: str) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –æ—Ä–¥–µ—Ä–∞"""
        try:
            logger.info(f"[ORDER_CHECK] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–∞ {order_id} –¥–ª—è {symbol}")
            
            order = await self.exchange.fetch_order(order_id, symbol)
            
            logger.info(f"[ORDER_CHECK] –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            logger.info(f"  Status: {order.get('status')}")
            logger.info(f"  Filled: {order.get('filled', 0)}")
            logger.info(f"  Remaining: {order.get('remaining', 0)}")
            logger.info(f"  Average price: {order.get('average')}")
            
            return order
            
        except Exception as e:
            logger.error(f"[ORDER_CHECK] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return {"error": str(e)}
    
    async def check_open_orders(self, symbol: str = None) -> list:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤"""
        try:
            logger.info(f"[ORDERS_CHECK] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤ –¥–ª—è {symbol or '–≤—Å—ñ—Ö —Å–∏–º–≤–æ–ª—ñ–≤'}")
            
            orders = await self.exchange.fetch_open_orders(symbol)
            
            logger.info(f"[ORDERS_CHECK] –ó–Ω–∞–π–¥–µ–Ω–æ {len(orders)} –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤:")
            for order in orders:
                logger.info(f"  {order['id']}: {order['symbol']} {order['side']} {order['amount']} @ {order['price']}")
            
            return orders
            
        except Exception as e:
            logger.error(f"[ORDERS_CHECK] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ—Ä–¥–µ—Ä—ñ–≤: {e}")
            return []
    
    def get_order_history(self) -> list:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –æ—Ä–¥–µ—Ä—ñ–≤"""
        return self.order_history
    
    def print_diagnostics(self):
        """–í–∏–≤–µ—Å—Ç–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é"""
        logger.info(f"[DIAGNOSTICS] –í—Å—å–æ–≥–æ —Å–ø—Ä–æ–± –æ—Ä–¥–µ—Ä—ñ–≤: {len(self.order_history)}")
        
        successful = [h for h in self.order_history if h.get('success')]
        failed = [h for h in self.order_history if not h.get('success')]
        
        logger.info(f"[DIAGNOSTICS] –£—Å–ø—ñ—à–Ω–∏—Ö: {len(successful)}")
        logger.info(f"[DIAGNOSTICS] –ù–µ–≤–¥–∞–ª–∏—Ö: {len(failed)}")
        
        if failed:
            logger.info("[DIAGNOSTICS] –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏:")
            for fail in failed[-3:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 3 –ø–æ–º–∏–ª–∫–∏
                logger.info(f"  {fail['timestamp']}: {fail['symbol']} - {fail['error']}")

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —à–≤–∏–¥–∫–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async def quick_balance_check(exchange):
    """–®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É"""
    try:
        balance = await exchange.fetch_balance()
        logger.info("[BALANCE_CHECK] –ë–∞–ª–∞–Ω—Å:")
        for currency, data in balance.items():
            if isinstance(data, dict) and data.get('total', 0) > 0:
                logger.info(f"  {currency}: {data['total']} (–≤—ñ–ª—å–Ω–æ: {data['free']})")
        return balance
    except Exception as e:
        logger.error(f"[BALANCE_CHECK] –ü–æ–º–∏–ª–∫–∞: {e}")
        return None

async def quick_connection_check(exchange):
    """–®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
    try:
        server_time = await exchange.fetch_time()
        logger.info(f"[CONNECTION_CHECK] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è OK, —Å–µ—Ä–≤–µ—Ä–Ω–∏–π —á–∞—Å: {datetime.fromtimestamp(server_time/1000)}")
        return True
    except Exception as e:
        logger.error(f"[CONNECTION_CHECK] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
        return False

if __name__ == "__main__":
    # –¢–µ—Å—Ç –º–æ–¥—É–ª—è
    print("Order Debugger –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
