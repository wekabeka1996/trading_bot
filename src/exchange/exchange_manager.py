"""
üîß EXCHANGE MANAGER
–ü—Ä–∞–≤–∏–ª—å–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance Testnet/Mainnet –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –∫–ª—é—á—ñ–≤
"""

import os
import ccxt  # ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π CCXT (—è–∫ —É —Ä–æ–±–æ—á–æ–º—É —Ç–µ—Å—Ç—ñ)
import asyncio
import logging
from typing import Dict, Optional, Any
from datetime import datetime

# –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É dotenv (—è–∫—â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
try:
    from dotenv import load_dotenv
    load_dotenv()  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env —Ñ–∞–π–ª
except ImportError:
    print("python-dotenv –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è.")

logger = logging.getLogger(__name__)

class ExchangeManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º"""
    
    def __init__(self, config: Dict = None):
        self.config = config or {}
        self.exchange = None
        self.is_connected = False
        self.testnet_mode = False
        
    def initialize(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ (–¢–û–ß–ù–û —è–∫ —É —Ä–æ–±–æ—á–æ–º—É —Ç–µ—Å—Ç—ñ)"""
        try:
            logger.info("[EXCHANGE] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance...")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—é—á—ñ –¢–û–ß–ù–û —è–∫ —É —Ç–µ—Å—Ç—ñ
            API_KEY = os.getenv('BINANCE_API_KEY')
            API_SECRET = os.getenv('BINANCE_SECRET')
            
            if not API_KEY or not API_SECRET:
                logger.error("[EXCHANGE] API –∫–ª—é—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                logger.info("[EXCHANGE] –°—Ç–≤–æ—Ä—ñ—Ç—å .env —Ñ–∞–π–ª –∑ –∫–ª—é—á–∞–º–∏ –∞–±–æ –æ–Ω–æ–≤—ñ—Ç—å config.json")
                return False
            
            logger.info(f"[EXCHANGE] üîë API Key: {API_KEY[:10]}...{API_KEY[-10:]}")
            logger.info(f"[EXCHANGE] üîë Secret: {API_SECRET[:10]}...{API_SECRET[-10:]}")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ CCXT –∫–ª—ñ—î–Ω—Ç –¢–û–ß–ù–û —è–∫ —É —Ä–æ–±–æ—á–æ–º—É —Ç–µ—Å—Ç—ñ
            self.exchange = ccxt.binance({
                "apiKey": API_KEY,
                "secret": API_SECRET,
                "enableRateLimit": True,
                "sandbox": True,  # –í–∞–∂–ª–∏–≤–æ: —Ç–µ—Å—Ç–Ω–µ—Ç —Ä–µ–∂–∏–º
                "options": {
                    "defaultType": "future",        # –≤–∞–∂–ª–∏–≤–æ: FUTURES, –Ω–µ spot
                    "adjustForTimeDifference": True,
                }
            })
            
            logger.info("[EXCHANGE] üèóÔ∏è CCXT –∫–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è Futures Testnet")
            
            # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¢–û–ß–ù–û —è–∫ —É —Ç–µ—Å—Ç—ñ
            if self._test_connection():
                self.is_connected = True
                self.testnet_mode = True
                logger.info("[EXCHANGE] ‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance Futures Testnet —É—Å–ø—ñ—à–Ω–µ!")
                return True
            else:
                logger.error("[EXCHANGE] ‚ùå –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è!")
                return False
                
        except Exception as e:
            logger.error(f"[EXCHANGE] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ: {e}")
            self.exchange = None
            return False
            self.exchange = ccxt.binance({
                'apiKey': api_key,
                'secret': api_secret,
                'enableRateLimit': True,
                'sandbox': testnet,                 # –í–ê–ñ–õ–ò–í–û: —Ç–µ—Å—Ç–Ω–µ—Ç —Ä–µ–∂–∏–º
                'options': {
                    'defaultType': 'future',        # –í–ê–ñ–õ–ò–í–û: futures, –Ω–µ spot
                    'adjustForTimeDifference': True,
                }
            })
            
            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ testnet —Ä–µ–∂–∏–º
            if testnet:
                logger.info("[EXCHANGE] –†–µ–∂–∏–º: BINANCE FUTURES TESTNET")
                self.testnet_mode = True
            else:
                logger.warning("[EXCHANGE] –†–µ–∂–∏–º: BINANCE FUTURES MAINNET (–†–ï–ê–õ–¨–ù–Ü –ì–†–û–®–Ü!)")
                self.testnet_mode = False
            
            # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —è–∫ —É —Ä–æ–±–æ—á–æ–º—É –∫–æ–¥—ñ)
            connection_ok = self._test_connection()
            if connection_ok:
                self.is_connected = True
                logger.info("[EXCHANGE] ‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!")
                self._log_account_info()
                return True
            else:
                logger.error("[EXCHANGE] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è!")
                return False
                
        except Exception as e:
            logger.error(f"[EXCHANGE] –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
            return False
    
    def _get_api_key(self) -> Optional[str]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ API –∫–ª—é—á –∑ .env –∞–±–æ config"""
        # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ .env
        key = os.getenv('BINANCE_API_KEY')
        if key and key != 'your_testnet_api_key_here':
            return key
        
        # –ü–æ—Ç—ñ–º config.json
        key = self.config.get('exchange', {}).get('api_key')
        if key and key != 'YOUR_BINANCE_API_KEY':
            return key
        
        return None
    
    def _get_api_secret(self) -> Optional[str]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ API secret –∑ .env –∞–±–æ config"""
        # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ .env (–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ –∑–º—ñ–Ω–Ω–æ—ó)
        secret = os.getenv('BINANCE_SECRET')  # –í–ò–ü–†–ê–í–õ–ï–ù–û: BINANCE_SECRET
        if secret and secret != 'your_testnet_secret_here':
            return secret
        
        # –ü–æ—Ç—ñ–º config.json
        secret = self.config.get('exchange', {}).get('api_secret')
        if secret and secret != 'YOUR_BINANCE_API_SECRET':
            return secret
        
        return None
    
    def _is_testnet_mode(self) -> bool:
        """–í–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ testnet"""
        # –ó .env (BINANCE_TESTNET - –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ –∑–º—ñ–Ω–Ω–æ—ó)
        env_testnet = os.getenv('BINANCE_TESTNET', '').lower()
        if env_testnet in ('true', '1', 'yes'):
            return True
        
        # –ó config
        return self.config.get('exchange', {}).get('testnet', True)
    
    def _validate_key_format(self, api_key: str, api_secret: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á—ñ–≤"""
        if not api_key or not api_secret:
            return False
        
        # Binance API –∫–ª—é—á—ñ –∑–∞–∑–≤–∏—á–∞–π 64 —Å–∏–º–≤–æ–ª–∏
        if len(api_key) < 40:
            logger.error(f"[EXCHANGE] API key –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π: {len(api_key)} —Å–∏–º–≤–æ–ª—ñ–≤")
            return False
        
        if len(api_secret) < 40:
            logger.error(f"[EXCHANGE] API secret –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π: {len(api_secret)} —Å–∏–º–≤–æ–ª—ñ–≤")
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ placeholder –∑–Ω–∞—á–µ–Ω–Ω—è
        placeholders = [
            'your_binance_api_key',
            'YOUR_BINANCE_API_KEY',
            'your_testnet_api_key_here',
            'xxx', 'test', 'placeholder'
        ]
        
        for placeholder in placeholders:
            if placeholder.lower() in api_key.lower():
                logger.error(f"[EXCHANGE] API key –º—ñ—Å—Ç–∏—Ç—å placeholder: {placeholder}")
                return False
            if placeholder.lower() in api_secret.lower():
                logger.error(f"[EXCHANGE] API secret –º—ñ—Å—Ç–∏—Ç—å placeholder: {placeholder}")
                return False
        
        return True
    
    def _test_connection(self) -> bool:
        """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ (–¢–û–ß–ù–û —è–∫ —É —Ä–æ–±–æ—á–æ–º—É —Ç–µ—Å—Ç—ñ)"""
        try:
            logger.info("[EXCHANGE] üìä –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å...")
            
            # –¢–µ—Å—Ç 1: –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç—É (–¢–û–ß–ù–û —è–∫ —É —Ç–µ—Å—Ç—ñ)
            balance = self.exchange.fetch_balance()
            usdt_balance = balance['total'].get('USDT', 0)
            logger.info(f"[EXCHANGE] üí∞ USDT balance: {usdt_balance}")
            
            # –¢–µ—Å—Ç 2: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–∏–Ω–∫—ñ–≤ (–¢–û–ß–ù–û —è–∫ —É —Ç–µ—Å—Ç—ñ)
            logger.info("[EXCHANGE] üè™ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–∏–Ω–∫–∏...")
            markets = self.exchange.load_markets()
            logger.info(f"[EXCHANGE] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(markets)} —Ä–∏–Ω–∫—ñ–≤")
            
            # –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—à–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ (–¢–û–ß–ù–û —è–∫ —É —Ç–µ—Å—Ç—ñ)
            our_symbols = ["BTC/USDT", "PENDLE/USDT", "DIA/USDT", "API3/USDT", "RENDER/USDT", "UMA/USDT", "FIDA/USDT"]
            available_count = 0
            
            for symbol in our_symbols:
                if symbol in markets:
                    available_count += 1
                    logger.info(f"[EXCHANGE] ‚úÖ {symbol} - –¥–æ—Å—Ç—É–ø–Ω–∏–π")
                else:
                    logger.warning(f"[EXCHANGE] ‚ùå {symbol} - –ù–ï –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            
            logger.info(f"[EXCHANGE] üìä –ù–∞—à—ñ —Å–∏–º–≤–æ–ª–∏: {available_count}/{len(our_symbols)} –¥–æ—Å—Ç—É–ø–Ω–æ")
            
            return True
            
        except ccxt.AuthenticationError as e:
            logger.error(f"[EXCHANGE] ‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {e}")
            logger.error("[EXCHANGE] üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ API –∫–ª—é—á—ñ –∑ https://testnet.binancefuture.com/")
            return False
        except ccxt.NetworkError as e:
            logger.error(f"[EXCHANGE] ‚ùå –ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            return False
        except Exception as e:
            logger.error(f"[EXCHANGE] ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
            return False
    
    def _log_account_info(self):
        """–õ–æ–≥—É–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫–∫–∞—É–Ω—Ç (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
        try:
            balance = self.exchange.fetch_balance()
            
            logger.info("[EXCHANGE] –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–∫–∫–∞—É–Ω—Ç:")
            logger.info(f"  –†–µ–∂–∏–º: {'TESTNET' if self.testnet_mode else 'MAINNET'}")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–µ–Ω—É–ª—å–æ–≤—ñ –±–∞–ª–∞–Ω—Å–∏
            for currency, data in balance.items():
                if isinstance(data, dict) and data.get('total', 0) > 0:
                    logger.info(f"  {currency}: {data['total']} (–¥–æ—Å—Ç—É–ø–Ω–æ: {data['free']})")
            
        except Exception as e:
            logger.warning(f"[EXCHANGE] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫–∫–∞—É–Ω—Ç: {e}")
    
    def close(self):
        """–ó–∞–∫—Ä–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
        if self.exchange:
            # –£ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É CCXT –Ω–µ–º–∞—î –º–µ—Ç–æ–¥—É close()
            self.exchange = None
            logger.info("[EXCHANGE] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ")
            self.is_connected = False

# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def print_setup_instructions():
    """–í–∏–≤–µ—Å—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
    print("üîß –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø BINANCE API")
    print("=" * 50)
    print()
    print("1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ https://testnet.binance.vision/")
    print("2. –£–≤—ñ–π–¥—ñ—Ç—å —á–µ—Ä–µ–∑ GitHub –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
    print("3. –°—Ç–≤–æ—Ä—ñ—Ç—å API –∫–ª—é—á—ñ:")
    print("   - –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Create API Key'")
    print("   - –í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 'Trading Bot')")
    print("   - –£–≤—ñ–º–∫–Ω—ñ—Ç—å 'Futures Trading' —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ")
    print("   - –°–∫–æ–ø—ñ—é–π—Ç–µ API Key —Ç–∞ Secret Key")
    print()
    print("4. –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env –≤ –ø–∞–ø—Ü—ñ –±–æ—Ç–∞:")
    print("   BINANCE_API_KEY=–≤–∞—à_api_key")
    print("   BINANCE_SECRET=–≤–∞—à_secret_key")
    print("   USE_TESTNET=true")
    print()
    print("5. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞ –∑–Ω–æ–≤—É")
    print()

if __name__ == "__main__":
    # –¢–µ—Å—Ç –º–æ–¥—É–ª—è
    print_setup_instructions()
