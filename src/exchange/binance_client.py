# –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±—ñ—Ä–∂–µ—é Binance
import ccxt
import asyncio
from typing import Dict, Optional, List
import logging
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class OrderResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—É"""
    success: bool
    order_id: Optional[str] = None
    price: Optional[float] = None
    quantity: Optional[float] = None
    error: Optional[str] = None

class BinanceExchange:
    def __init__(self, api_key: str, api_secret: str, testnet: bool = True):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance
        """
        self.exchange = ccxt.binance({
            'apiKey': api_key,
            'secret': api_secret,
            'sandbox': testnet,  # –¢–µ—Å—Ç–æ–≤–∞ –º–µ—Ä–µ–∂–∞
            'enableRateLimit': True,
            'options': {
                'defaultType': 'future'  # –î–ª—è —Ñ'—é—á–µ—Ä—Å—ñ–≤
            }
        })
        
        self.testnet = testnet
        logger.info(f"üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Binance {'Testnet' if testnet else 'Mainnet'}")
    
    async def get_balance(self) -> Dict[str, float]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É"""
        try:
            balance = await self.exchange.fetch_balance()
            return {
                'USDT': balance['USDT']['free'] if 'USDT' in balance else 0.0,
                'total': balance['USDT']['total'] if 'USDT' in balance else 0.0
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {e}")
            return {'USDT': 0.0, 'total': 0.0}
    
    async def get_current_price(self, symbol: str) -> Optional[float]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏"""
        try:
            ticker = await self.exchange.fetch_ticker(symbol)
            return ticker['last']
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ {symbol}: {e}")
            return None
    
    async def get_orderbook(self, symbol: str, limit: int = 100) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–∫–∞–Ω—É"""
        try:
            orderbook = await self.exchange.fetch_order_book(symbol, limit)
            return orderbook
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–∫–∞–Ω—É {symbol}: {e}")
            return None
    
    async def calculate_spread(self, symbol: str) -> Optional[float]:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–ø—Ä–µ–¥—É"""
        orderbook = await self.get_orderbook(symbol, 5)
        if not orderbook:
            return None
        
        best_bid = orderbook['bids'][0][0] if orderbook['bids'] else 0
        best_ask = orderbook['asks'][0][0] if orderbook['asks'] else 0
        
        if best_bid and best_ask:
            spread = ((best_ask - best_bid) / best_bid) * 100
            return spread
        return None
    
    async def get_funding_rate(self, symbol: str) -> Optional[float]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è funding rate"""
        try:
            funding = await self.exchange.fetch_funding_rate(symbol)
            return funding['fundingRate'] * 100  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∏
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è funding rate {symbol}: {e}")
            return None
    
    async def create_market_order(self, symbol: str, side: str, amount: float, 
                                leverage: float = 1.0) -> OrderResult:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä—É"""
        try:
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–µ–¥–∏—Ç–Ω–µ –ø–ª–µ—á–µ
            if leverage > 1.0:
                await self.exchange.set_leverage(leverage, symbol)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Ä–¥–µ—Ä
            order = await self.exchange.create_market_order(
                symbol=symbol,
                side=side,  # 'buy' –∞–±–æ 'sell'
                amount=amount
            )
            
            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ: {side.upper()} {amount} {symbol} @ {order.get('price', 'Market')}")
            
            return OrderResult(
                success=True,
                order_id=order['id'],
                price=order.get('price'),
                quantity=order.get('amount')
            )
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—É {symbol}: {e}")
            return OrderResult(success=False, error=str(e))
    
    async def create_stop_loss_order(self, symbol: str, side: str, amount: float, 
                                   stop_price: float) -> OrderResult:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä—É"""
        try:
            order = await self.exchange.create_order(
                symbol=symbol,
                type='stop_market',
                side=side,
                amount=amount,
                params={'stopPrice': stop_price}
            )
            
            logger.info(f"üõ°Ô∏è Stop-Loss –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {symbol} @ {stop_price}")
            
            return OrderResult(
                success=True,
                order_id=order['id'],
                price=stop_price,
                quantity=amount
            )
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å {symbol}: {e}")
            return OrderResult(success=False, error=str(e))
    
    async def create_take_profit_order(self, symbol: str, side: str, amount: float, 
                                     take_profit_price: float) -> OrderResult:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç –æ—Ä–¥–µ—Ä—É"""
        try:
            order = await self.exchange.create_order(
                symbol=symbol,
                type='take_profit_market',
                side=side,
                amount=amount,
                params={'stopPrice': take_profit_price}
            )
            
            logger.info(f"üéØ Take-Profit –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {symbol} @ {take_profit_price}")
            
            return OrderResult(
                success=True,
                order_id=order['id'],
                price=take_profit_price,
                quantity=amount
            )
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ—ñ—Ç {symbol}: {e}")
            return OrderResult(success=False, error=str(e))
    
    async def get_open_positions(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π"""
        try:
            positions = await self.exchange.fetch_positions()
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó
            open_positions = [pos for pos in positions if pos['contracts'] > 0]
            return open_positions
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}")
            return []
    
    async def close_position(self, symbol: str) -> OrderResult:
        """–ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
        try:
            positions = await self.get_open_positions()
            position = next((pos for pos in positions if pos['symbol'] == symbol), None)
            
            if not position:
                return OrderResult(success=False, error="–ü–æ–∑–∏—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            
            side = 'sell' if position['side'] == 'long' else 'buy'
            amount = abs(position['contracts'])
            
            return await self.create_market_order(symbol, side, amount)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó {symbol}: {e}")
            return OrderResult(success=False, error=str(e))
    
    async def cancel_all_orders(self, symbol: str) -> bool:
        """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ—Ä–¥–µ—Ä—ñ–≤ –ø–æ —Å–∏–º–≤–æ–ª—É"""
        try:
            await self.exchange.cancel_all_orders(symbol)
            logger.info(f"üóëÔ∏è –í—Å—ñ –æ—Ä–¥–µ—Ä–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ: {symbol}")
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤ {symbol}: {e}")
            return False
    
    async def get_24h_stats(self, symbol: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è 24-–≥–æ–¥–∏–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            ticker = await self.exchange.fetch_ticker(symbol)
            return {
                'price': ticker['last'],
                'change_24h': ticker['change'],
                'change_24h_percent': ticker['percentage'],
                'volume': ticker['baseVolume'],
                'high': ticker['high'],
                'low': ticker['low']
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {symbol}: {e}")
            return None

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API
async def test_connection(exchange: BinanceExchange) -> bool:
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
    try:
        balance = await exchange.get_balance()
        logger.info(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ. –ë–∞–ª–∞–Ω—Å USDT: {balance['USDT']}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
        return False

async def get_tradable_symbols(exchange: BinanceExchange, base_currency: str = 'USDT') -> List[str]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä"""
    try:
        markets = await exchange.exchange.fetch_markets()
        symbols = [market['symbol'] for market in markets 
                  if market['quote'] == base_currency and market['active']]
        return symbols
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤: {e}")
        return []
