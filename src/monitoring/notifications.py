# –ú–æ–¥—É–ª—å –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å (Telegram + Email)
import asyncio
import aiohttp
import smtplib
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class NotificationManager:
    def __init__(self, config: Dict):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å
        
        Args:
            config: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ Telegram —Ç–∞ Email
        """
        self.config = config
        self.telegram_enabled = config.get('telegram', {}).get('enabled', False)
        self.email_enabled = config.get('email', {}).get('enabled', False)
        
        # Telegram –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        if self.telegram_enabled:
            self.telegram_token = config['telegram']['bot_token']
            self.telegram_chat_id = config['telegram']['chat_id']
            
        # Email –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        if self.email_enabled:
            self.smtp_server = config['email']['smtp_server']
            self.smtp_port = config['email']['smtp_port']
            self.email = config['email']['email']
            self.email_password = config['email']['password']
        
        logger.info(f"üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: Telegram={'‚úÖ' if self.telegram_enabled else '‚ùå'}, Email={'‚úÖ' if self.email_enabled else '‚ùå'}")
    
    async def send_telegram_message(self, message: str, parse_mode: str = 'HTML') -> bool:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram"""
        if not self.telegram_enabled:
            return False
        
        url = f"https://api.telegram.org/bot{self.telegram_token}/sendMessage"
        
        payload = {
            'chat_id': self.telegram_chat_id,
            'text': message,
            'parse_mode': parse_mode
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload) as response:
                    if response.status == 200:
                        logger.debug("‚úÖ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        return True
                    else:
                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Telegram: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Telegram: {e}")
            return False
    
    async def send_email(self, subject: str, message: str) -> bool:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ Email"""
        if not self.email_enabled:
            return False
        
        try:
            msg = MIMEMultipart()
            msg['From'] = self.email
            msg['To'] = self.email  # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–æ–±—ñ
            msg['Subject'] = subject
            
            msg.attach(MIMEText(message, 'html'))
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SMTP
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.email, self.email_password)
                server.send_message(msg)
            
            logger.debug("‚úÖ Email –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Email: {e}")
            return False
    
    async def notify_position_opened(self, symbol: str, side: str, size: float, 
                                   price: float, leverage: float):
        """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
        emoji = "üü¢" if side.lower() == 'buy' else "üî¥"
        
        message = f"""
{emoji} <b>–ü–û–ó–ò–¶–Ü–Ø –í–Ü–î–ö–†–ò–¢–ê</b>

üí∞ <b>–°–∏–º–≤–æ–ª:</b> {symbol}
üìä <b>–ù–∞–ø—Ä—è–º–æ–∫:</b> {side.upper()}
üíµ <b>–†–æ–∑–º—ñ—Ä:</b> ${size:.2f}
üí≤ <b>–¶—ñ–Ω–∞ –≤—Ö–æ–¥—É:</b> ${price:.4f}
‚ö° <b>–ü–ª–µ—á–µ:</b> {leverage}x
üïê <b>–ß–∞—Å:</b> {datetime.now().strftime('%H:%M:%S')}
        """
        
        await self.send_telegram_message(message)
        await self.send_email(f"–ü–æ–∑–∏—Ü—ñ—è –≤—ñ–¥–∫—Ä–∏—Ç–∞: {symbol}", message.replace('<b>', '').replace('</b>', ''))
    
    async def notify_position_closed(self, symbol: str, pnl: float, pnl_percent: float, 
                                   reason: str):
        """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó"""
        emoji = "‚úÖ" if pnl > 0 else "‚ùå"
        pnl_emoji = "üí∞" if pnl > 0 else "üí∏"
        
        message = f"""
{emoji} <b>–ü–û–ó–ò–¶–Ü–Ø –ó–ê–ö–†–ò–¢–ê</b>

üí∞ <b>–°–∏–º–≤–æ–ª:</b> {symbol}
{pnl_emoji} <b>P&L:</b> ${pnl:.2f} ({pnl_percent:+.2f}%)
üìã <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}
üïê <b>–ß–∞—Å:</b> {datetime.now().strftime('%H:%M:%S')}
        """
        
        await self.send_telegram_message(message)
        await self.send_email(f"–ü–æ–∑–∏—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç–∞: {symbol}", message.replace('<b>', '').replace('</b>', ''))
    
    async def notify_risk_warning(self, warning_type: str, details: str):
        """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ä–∏–∑–∏–∫–∏"""
        message = f"""
‚ö†Ô∏è <b>–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø –ü–†–û –†–ò–ó–ò–ö</b>

üö® <b>–¢–∏–ø:</b> {warning_type}
üìù <b>–î–µ—Ç–∞–ª—ñ:</b> {details}
üïê <b>–ß–∞—Å:</b> {datetime.now().strftime('%H:%M:%S')}

<i>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å!</i>
        """
        
        await self.send_telegram_message(message)
        await self.send_email(f"‚ö†Ô∏è –†–∏–∑–∏–∫-–ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: {warning_type}", message.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', ''))
    
    async def notify_emergency_stop(self, total_loss: float, positions_closed: int):
        """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –µ–∫—Å—Ç—Ä–µ–Ω—É –∑—É–ø–∏–Ω–∫—É"""
        message = f"""
üö® <b>–ï–ö–°–¢–†–ï–ù–ê –ó–£–ü–ò–ù–ö–ê!</b>

üí∏ <b>–ó–∞–≥–∞–ª—å–Ω–∏–π –∑–±–∏—Ç–æ–∫:</b> ${total_loss:.2f}
üîí <b>–ü–æ–∑–∏—Ü—ñ–π –∑–∞–∫—Ä–∏—Ç–æ:</b> {positions_closed}
‚è∞ <b>–ß–∞—Å:</b> {datetime.now().strftime('%H:%M:%S')}

<b>‚ö†Ô∏è –í–°–Ü–• –ü–û–ó–ò–¶–Ü–á –ó–ê–ö–†–ò–¢–û!</b>
<i>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É</i>
        """
        
        await self.send_telegram_message(message)
        await self.send_email("üö® –ï–ö–°–¢–†–ï–ù–ê –ó–£–ü–ò–ù–ö–ê –¢–û–†–ì–Ü–í–õ–Ü", message.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', ''))
    
    async def notify_market_event(self, event_type: str, description: str):
        """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Ä–∏–Ω–∫–æ–≤—ñ –ø–æ–¥—ñ—ó"""
        emoji_map = {
            'powell_speech': 'üé§',
            'pmi_data': 'üìä',
            'btc_dominance': '‚Çø',
            'funding_rate': 'üí±',
            'news': 'üì∞'
        }
        
        emoji = emoji_map.get(event_type, 'üìà')
        
        message = f"""
{emoji} <b>–†–ò–ù–ö–û–í–ê –ü–û–î–Ü–Ø</b>

üìã <b>–¢–∏–ø:</b> {event_type.replace('_', ' ').title()}
üìù <b>–û–ø–∏—Å:</b> {description}
üïê <b>–ß–∞—Å:</b> {datetime.now().strftime('%H:%M:%S')}
        """
        
        await self.send_telegram_message(message)
    
    async def send_daily_report(self, report_data: Dict):
        """–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç"""
        total_pnl = report_data.get('total_pnl', 0)
        trades_count = report_data.get('trades_count', 0)
        win_rate = report_data.get('win_rate', 0)
        active_positions = report_data.get('active_positions', 0)
        
        pnl_emoji = "üí∞" if total_pnl > 0 else "üí∏" if total_pnl < 0 else "‚ûñ"
        
        message = f"""
üìä <b>–©–û–î–ï–ù–ù–ò–ô –ó–í–Ü–¢</b>

{pnl_emoji} <b>P&L –∑–∞ –¥–µ–Ω—å:</b> ${total_pnl:.2f}
üìà <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–≥–æ–¥:</b> {trades_count}
üéØ <b>–í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö:</b> {win_rate:.1f}%
üîÑ <b>–ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π:</b> {active_positions}

üìÖ <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y')}
        """
        
        await self.send_telegram_message(message)
        await self.send_email("üìä –©–æ–¥–µ–Ω–Ω–∏–π —Ç–æ—Ä–≥–æ–≤–∏–π –∑–≤—ñ—Ç", message.replace('<b>', '').replace('</b>', ''))
    
    async def notify_system_status(self, status: str, uptime: str, last_trade: str):
        """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"""
        status_emoji = "üü¢" if status == "running" else "üî¥" if status == "stopped" else "üü°"
        
        message = f"""
{status_emoji} <b>–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–ò</b>

‚ö° <b>–°—Ç–∞–Ω:</b> {status.upper()}
‚è±Ô∏è <b>–ß–∞—Å —Ä–æ–±–æ—Ç–∏:</b> {uptime}
üïê <b>–û—Å—Ç–∞–Ω–Ω—è —É–≥–æ–¥–∞:</b> {last_trade}
üìÖ <b>–ß–∞—Å:</b> {datetime.now().strftime('%H:%M:%S')}
        """
        
        await self.send_telegram_message(message)
    
    # –®–≤–∏–¥–∫—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–¥—ñ–π
    async def alert_high_volatility(self, symbol: str, volatility: float):
        """–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –≤–∏—Å–æ–∫—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å"""
        await self.notify_risk_warning(
            "–í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç—ñ–ª—å–Ω—ñ—Å—Ç—å", 
            f"{symbol}: {volatility:.2f}% –∑–∞ –≥–æ–¥–∏–Ω—É"
        )
    
    async def alert_funding_rate_spike(self, symbol: str, funding_rate: float):
        """–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç—Ä–∏–±–æ–∫ funding rate"""
        await self.notify_market_event(
            "funding_rate",
            f"{symbol} funding rate: {funding_rate:.3f}% (–ø–µ—Ä–µ–≥—Ä—ñ–≤ —Ä–∏–Ω–∫—É)"
        )
    
    async def alert_btc_dominance_change(self, dominance: float, threshold: float):
        """–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É BTC –¥–æ–º—ñ–Ω–∞—Ü—ñ—ó"""
        await self.notify_market_event(
            "btc_dominance",
            f"BTC –¥–æ–º—ñ–Ω–∞—Ü—ñ—è: {dominance:.1f}% (–ø–æ—Ä—ñ–≥ {threshold:.1f}%)"
        )

# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
async def test_notifications(config: Dict):
    """–¢–µ—Å—Ç –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
    notifier = NotificationManager(config)
    
    logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å...")
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await notifier.send_telegram_message("ü§ñ –¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ - —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î!")
    
    # –¢–µ—Å—Ç –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
    await notifier.notify_position_opened("BTCUSDT", "buy", 100.0, 45000.0, 2.0)
    
    # –¢–µ—Å—Ç –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó
    await notifier.notify_position_closed("BTCUSDT", 15.50, 3.2, "Take Profit")
    
    # –¢–µ—Å—Ç –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    await notifier.notify_risk_warning("–í–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫", "VaR –ø–µ—Ä–µ–≤–∏—â—É—î 3%")
    
    logger.info("‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
