"""
üîß WINDOWS UNICODE LOGGING FIX
–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∑ emoji —Ç–∞ –∫–∏—Ä–∏–ª–∏—Ü–µ—é –≤ Windows
"""

import logging
import sys
import os

def setup_logging():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é UTF-8 –¥–ª—è Windows"""
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥—ñ–≤
    fmt = logging.Formatter(
        "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        "%Y-%m-%d %H:%M:%S"
    )
    
    # –û—á–∏—â–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ handlers
    root = logging.getLogger()
    for handler in root.handlers[:]:
        root.removeHandler(handler)
    
    root.setLevel(logging.INFO)

    # File handler –∑ UTF-8
    try:
        file_handler = logging.FileHandler("trading_bot.log", encoding="utf-8")
        file_handler.setFormatter(fmt)
        root.addHandler(file_handler)
    except Exception as e:
        print(f"Warning: Could not create file handler: {e}")

    # Console handler –∑ UTF-8 —Ç–∞ fallback –¥–ª—è Windows
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ UTF-8 –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª—ñ
        if sys.platform == "win32":
            try:
                import ctypes
                ctypes.windll.kernel32.SetConsoleOutputCP(65001)
            except Exception:
                pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ console handler –∑ UTF-8 —Ç–∞ errors='replace'
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.encoding = 'utf-8'
        console_handler.setFormatter(fmt)
        root.addHandler(console_handler)
        
    except Exception as e:
        # Fallback - –ø—Ä–æ—Å—Ç–∏–π StreamHandler
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(fmt)
        root.addHandler(console_handler)
        print(f"Warning: Using fallback console handler: {e}")

    return root

def get_logger(name: str = __name__):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ logger –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º"""
    return logging.getLogger(name)

if __name__ == "__main__":
    setup_logging()
    logger = get_logger("test")
    logger.info("[TEST] –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–∏—Ä–∏–ª–∏—Ü—ñ —Ç–∞ ASCII —Ç–µ–≥—ñ–≤")
    logger.warning("[WARNING] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å")
    logger.error("[ERROR] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–º–∏–ª–æ–∫")
    print("–õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
