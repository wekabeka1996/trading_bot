# –î–∞—à–±–æ—Ä–¥ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import json
import os

st.set_page_config(
    page_title="–¢–æ—Ä–≥–æ–≤–∏–π –ë–æ—Ç - –î–∞—à–±–æ—Ä–¥", 
    page_icon="ü§ñ",
    layout="wide"
)

def load_trading_data():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
    # –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—ñ–≤/–ë–î
    # –ü–æ–∫–∏ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    return {
        'portfolio_value': 62.50,
        'daily_pnl': 4.50,
        'total_pnl': 4.50,
        'active_positions': 3,
        'total_trades': 8,
        'win_rate': 62.5
    }

def create_portfolio_chart():
    """–ì—Ä–∞—Ñ—ñ–∫ –∑–º—ñ–Ω–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    dates = pd.date_range(start='2025-07-15', end='2025-07-21', freq='D')
    values = [58.0, 59.2, 57.8, 61.3, 60.1, 62.5, 62.5]
    
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=dates, 
        y=values,
        mode='lines+markers',
        name='–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è',
        line=dict(color='#00D4AA', width=3)
    ))
    
    fig.update_layout(
        title="üìà –î–∏–Ω–∞–º—ñ–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è",
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–í–∞—Ä—Ç—ñ—Å—Ç—å ($)",
        height=400
    )
    
    return fig

def create_positions_table():
    """–¢–∞–±–ª–∏—Ü—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π"""
    positions_data = {
        '–°–∏–º–≤–æ–ª': ['PENDLE', 'DIA', 'API3'],
        '–†–æ–∑–º—ñ—Ä ($)': [14.50, 13.34, 9.86],
        '–í—Ö—ñ–¥–Ω–∞ —Ü—ñ–Ω–∞': [2.24, 0.67, 1.45],
        '–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞': [2.31, 0.69, 1.43],
        'P&L (%)': ['+3.1%', '+2.9%', '-1.4%'],
        '–ü–ª–µ—á–µ': ['5x', '5x', '4x']
    }
    
    return pd.DataFrame(positions_data)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–∞—à–±–æ—Ä–¥—É"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞")
    st.markdown("**–í–µ—Ä—Å—ñ—è 2.0** | –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –ø—ñ–¥ –ø–ª–∞–Ω –≤—ñ–¥ 21.07.2025")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    data = load_trading_data()
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è", 
            value=f"${data['portfolio_value']:.2f}",
            delta=f"{data['daily_pnl']:+.2f} –∑–∞ –¥–µ–Ω—å"
        )
    
    with col2:
        st.metric(
            label="üìä –ó–∞–≥–∞–ª—å–Ω–∏–π P&L", 
            value=f"${data['total_pnl']:+.2f}",
            delta=f"{(data['total_pnl']/58)*100:+.1f}%"
        )
    
    with col3:
        st.metric(
            label="üîÑ –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó", 
            value=data['active_positions']
        )
    
    with col4:
        st.metric(
            label="üéØ –í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö", 
            value=f"{data['win_rate']:.1f}%"
        )
    
    # –ì—Ä–∞—Ñ—ñ–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    st.plotly_chart(create_portfolio_chart(), use_container_width=True)
    
    # –î–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—å
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìã –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó")
        positions_df = create_positions_table()
        st.dataframe(positions_df, use_container_width=True)
    
    with col2:
        st.subheader("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        
        # –ï–ª–µ–º–µ–Ω—Ç–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        if st.button("üõë –ï–∫—Å—Ç—Ä–µ–Ω–∞ –∑—É–ø–∏–Ω–∫–∞", type="primary"):
            st.error("üö® –ö–æ–º–∞–Ω–¥–∞ –µ–∫—Å—Ç—Ä–µ–Ω–Ω–æ—ó –∑—É–ø–∏–Ω–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        
        if st.button("üìä –ï–∫—Å–ø–æ—Ä—Ç –∑–≤—ñ—Ç—É"):
            st.success("‚úÖ –ó–≤—ñ—Ç –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ trading_report.pdf")
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–∏–∑–∏–∫—ñ–≤
        st.write("**–†–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç:**")
        max_risk = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–∏–∑–∏–∫ (%)", 1.0, 5.0, 2.5, 0.1)
        emergency_stop = st.slider("–ï–∫—Å—Ç—Ä–µ–Ω–∏–π —Å—Ç–æ–ø (%)", -20.0, -5.0, -10.0, 1.0)
    
    # –õ–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    st.subheader("üìù –û—Å—Ç–∞–Ω–Ω—ñ –¥—ñ—ó")
    
    log_data = {
        '–ß–∞—Å': ['14:23:45', '14:15:32', '13:45:12', '12:30:05'],
        '–î—ñ—è': ['–ü–æ–∑–∏—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç–∞', '–°—Ç–æ–ø-–ª–æ—Å—Å —Å–ø—Ä–∞—Ü—é–≤–∞–≤', '–ü–æ–∑–∏—Ü—ñ—è –≤—ñ–¥–∫—Ä–∏—Ç–∞', '–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞'],
        '–°–∏–º–≤–æ–ª': ['PENDLE', 'API3', 'DIA', '-'],
        '–†–µ–∑—É–ª—å—Ç–∞—Ç': ['+$2.15', '-$1.20', '–í—ñ–¥–∫—Ä–∏—Ç–æ', 'OK']
    }
    
    log_df = pd.DataFrame(log_data)
    st.dataframe(log_df, use_container_width=True)
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
    st.sidebar.title("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏")
    st.sidebar.success("üü¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î")
    st.sidebar.info(f"‚è±Ô∏è –ß–∞—Å —Ä–æ–±–æ—Ç–∏: 2 –≥–æ–¥ 15 —Ö–≤")
    st.sidebar.info(f"üîÑ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {datetime.now().strftime('%H:%M:%S')}")
    
    # –†–∏–Ω–∫–æ–≤—ñ —É–º–æ–≤–∏
    st.sidebar.title("üåê –†–∏–Ω–∫–æ–≤—ñ —É–º–æ–≤–∏")
    st.sidebar.metric("‚Çø BTC –¥–æ–º—ñ–Ω–∞—Ü—ñ—è", "61.2%", "-0.8%")
    st.sidebar.metric("üò® Fear & Greed", "74", "+5")
    st.sidebar.metric("üí± Avg Funding", "0.08%", "-0.02%")

if __name__ == "__main__":
    main()
