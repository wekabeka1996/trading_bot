#!/usr/bin/env python3
# –¢–µ—Å—Ç flash-drop —Ç—Ä–∏–≥–µ—Ä–∞

from trading_bot.plan_parser import PlanParser
from trading_bot.engine import Engine
from trading_bot.exchange_connector import BinanceFuturesConnector
from trading_bot.notifications import TelegramNotifier
from trading_bot.journal import TradingJournal
from unittest.mock import Mock
import os
from dotenv import load_dotenv

def test_flash_drop_functionality():
    """–¢–µ—Å—Ç—É—î —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å flash-drop —Ç—Ä–∏–≥–µ—Ä–∞"""
    
    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø FLASH-DROP –¢–†–ò–ì–ï–†–ê")
    print("="*50)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–ª–∞–Ω
    parser = PlanParser('data/plan_08-07_FINAL.json')
    if not parser.load_and_validate():
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—É")
        return
        
    plan = parser.plan
    print(f"‚úÖ –ü–ª–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {plan.plan_date}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å flash_drop —Ç—Ä–∏–≥–µ—Ä–∞
    flash_drop = plan.risk_triggers.get('flash_drop')
    if not flash_drop:
        print("‚ùå Flash-drop —Ç—Ä–∏–≥–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
        
    print(f"‚úÖ Flash-drop —Ç—Ä–∏–≥–µ—Ä –∑–Ω–∞–π–¥–µ–Ω–æ:")
    print(f"   üìâ –ü–æ—Ä—ñ–≥: {flash_drop.threshold_pct*100:.1f}%")
    print(f"   üéØ –î—ñ—è: {flash_drop.action}")
    print(f"   üìä –ê–∫—Ç–∏–≤–∏: {flash_drop.assets}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–≥—ñ–∫—É –≤ engine.py
    load_dotenv()
    use_testnet = os.getenv('BINANCE_TESTNET', 'true').lower() == 'true'
    
    if use_testnet:
        api_key = os.getenv('BINANCE_TESTNET_API_KEY', 'test')
        api_secret = os.getenv('BINANCE_TESTNET_SECRET', 'test')
    else:
        api_key = os.getenv('BINANCE_API_KEY', 'test')
        api_secret = os.getenv('BINANCE_SECRET', 'test')
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ mock –æ–±'—î–∫—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    notifier = TelegramNotifier("", "")
    journal = TradingJournal()
    
    try:
        exchange = BinanceFuturesConnector(api_key, api_secret, testnet=use_testnet)
        engine = Engine(parser, exchange, notifier, journal)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è –ø–ª–∞–Ω –≤ engine
        if engine._initial_setup():
            print("‚úÖ Engine —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∑ –Ω–æ–≤–∏–º –ø–ª–∞–Ω–æ–º")
            print(f"‚úÖ Flash-drop —Ç—Ä–∏–≥–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ñ: {len(engine.plan.risk_triggers)}")
            
            # –°–∏–º—É–ª—é—î–º–æ flash-drop detection
            print("\nüß™ –°–ò–ú–£–õ–Ø–¶–Ü–Ø FLASH-DROP:")
            print("   –ö–æ–¥ –≤ engine.py –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∑–º—ñ–Ω–∏ —Ü—ñ–Ω –∫–æ–∂–Ω—ñ 15 —Å–µ–∫—É–Ω–¥")
            print("   –ü—Ä–∏ –ø–∞–¥—ñ–Ω–Ω—ñ BTC –Ω–∞ -3% –∑–∞ 5 —Ö–≤–∏–ª–∏–Ω —Å–ø—Ä–∞—Ü—é—î kill-switch")
            print("   –í—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó –±—É–¥—É—Ç—å –∑–∞–∫—Ä–∏—Ç—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ")
            
        else:
            print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Engine")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ: {e}")
    
    print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print("‚úÖ Flash-drop —Ç—Ä–∏–≥–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
    print("‚úÖ Risk budget –ø—ñ–¥–≤–∏—â–µ–Ω–æ –¥–æ 3.3%")
    print("‚úÖ –í—Å—ñ —ñ—Å–Ω—É—é—á—ñ –∑–∞—Ö–∏—Å–Ω—ñ –º–µ—Ö–∞–Ω—ñ–∑–º–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ")
    print("‚úÖ –ü–ª–∞–Ω –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")

if __name__ == '__main__':
    test_flash_drop_functionality()
