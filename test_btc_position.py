"""
üöÄ –ü–†–û–°–¢–ò–ô –¢–ï–°–¢ - –û–î–ù–ê –ü–û–ó–ò–¶–Ü–Ø BTC/USDT
–¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –Ω–∞–π–ª—ñ–∫–≤—ñ–¥–Ω—ñ—à—ñ–π –ø–∞—Ä—ñ
"""

import asyncio
import logging
from main import TradingBot

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def test_btc_position():
    """–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–¥–Ω—ñ—î—ó BTC –ø–æ–∑–∏—Ü—ñ—ó"""
    
    print("üöÄ –¢–ï–°–¢ –û–î–ù–Ü–Ñ–á BTC –ü–û–ó–ò–¶–Ü–á")
    print("=" * 40)
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç –ë–ï–ó –∫–æ–Ω—Ñ—ñ–≥—É (–≤—ñ–Ω —Å–∞–º –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å config.json)
        bot = TradingBot()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        connection_success = await bot.init_exchange()
        if not connection_success:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±—ñ—Ä–∂—ñ")
            return False
        
        print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ —É—Å–ø—ñ—à–Ω–µ")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É BTC
        btc_price = await bot.get_current_price("BTC/USDT")
        print(f"üíé –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ BTC: ${btc_price}")
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ú–Ü–ù–Ü–ú–ê–õ–¨–ù–£ –∫—ñ–ª—å–∫—ñ—Å—Ç—å (0.001 BTC)
        min_quantity = 0.001  # –ú—ñ–Ω—ñ–º—É–º –¥–ª—è BTC/USDT
        position_size = min_quantity * btc_price
        
        print(f"üìä –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {min_quantity} BTC")
        print(f"üí∞ –ü–æ—Ç—Ä—ñ–±–Ω–∞ —Å—É–º–∞: ${position_size:.2f}")
        print(f"üíµ –û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ${min_quantity * btc_price:.2f}")
        
        if position_size > 200:  # –Ø–∫—â–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ—Ä–æ–≥–æ –¥–ª—è —Ç–µ—Å—Ç—É
            print(f"‚ö†Ô∏è  BTC –∑–∞–Ω–∞–¥—Ç–æ –¥–æ—Ä–æ–≥–∏–π –¥–ª—è —Ç–µ—Å—Ç—É (${position_size:.2f})")
            print("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –±—ñ–ª—å—à –¥–æ—Å—Ç—É–ø–Ω—É –º–æ–Ω–µ—Ç—É...")
            
            # –¢–µ—Å—Ç—É—î–º–æ ETH/USDT –∑–∞–º—ñ—Å—Ç—å BTC
            eth_price = await bot.get_current_price("ETH/USDT")
            print(f"üíé –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ ETH: ${eth_price}")
            
            test_position_size = 50  # $50 –¥–ª—è —Ç–µ—Å—Ç—É
            quantity = test_position_size / eth_price
            
            print(f"üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å ETH –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ: {quantity:.6f}")
            
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ OrderDebugger
            from order_debugger import OrderDebugger
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –æ—Ä–¥–µ—Ä –Ω–∞ ETH
            debugger = OrderDebugger(bot.exchange_manager.exchange)
            order_result = debugger.debug_create_order(
                symbol="ETH/USDT",
                side="buy", 
                amount=quantity,
                order_type="market"
            )
            
            symbol_used = "ETH/USDT"
        else:
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ OrderDebugger
            from order_debugger import OrderDebugger
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –æ—Ä–¥–µ—Ä –Ω–∞ BTC
            debugger = OrderDebugger(bot.exchange_manager.exchange)
            order_result = debugger.debug_create_order(
                symbol="BTC/USDT",
                side="buy", 
                amount=min_quantity,
                order_type="market"
            )
            
            symbol_used = "BTC/USDT"
        
        if "error" in order_result:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞: {order_result['error']}")
            return False
        else:
            print(f"‚úÖ –û–†–î–ï–† –°–¢–í–û–†–ï–ù–û –£–°–ü–Ü–®–ù–û!")
            print(f"  –°–∏–º–≤–æ–ª: {symbol_used}")
            print(f"  ID: {order_result.get('id')}")
            print(f"  –°—Ç–∞—Ç—É—Å: {order_result.get('status')}")
            print(f"  –í–∏–∫–æ–Ω–∞–Ω–æ: {order_result.get('filled', 0)}")
            return True
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(test_btc_position())
