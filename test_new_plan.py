#!/usr/bin/env python3
# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É –∑ LEVER, PLAY, OMNI

from trading_bot.plan_parser import PlanParser
from trading_bot.engine import Engine
from trading_bot.exchange_connector import BinanceFuturesConnector
from trading_bot.notifications import TelegramNotifier
from trading_bot.journal import TradingJournal
import os
from dotenv import load_dotenv

def test_new_plan():
    """–ü–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É"""
    
    print('üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ù–û–í–û–ì–û –ü–õ–ê–ù–£ v2.2')
    print('='*60)
    
    # 1. –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–ª–∞–Ω—É
    print('1Ô∏è‚É£ –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ü–õ–ê–ù–£')
    print('-'*30)
    
    parser = PlanParser('data/trading_plan.json')
    if not parser.load_and_validate():
        print('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–ª–∞–Ω—É')
        return False
        
    plan = parser.plan
    print('‚úÖ –ü–ª–∞–Ω –≤–∞–ª—ñ–¥–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!')
    print(f'üìä –í–µ—Ä—Å—ñ—è: {plan.plan_version}')
    print()
    
    # 2. –ê–Ω–∞–ª—ñ–∑ –Ω–æ–≤–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤
    print('2Ô∏è‚É£ –ê–ù–ê–õ–Ü–ó –ê–ö–¢–ò–í–Ü–í')
    print('-'*30)
    
    total_position_size = 0
    for asset in plan.active_assets:
        print(f'   {asset.symbol}:')
        print(f'     –†–æ–∑–º—ñ—Ä: {asset.position_size_pct*100:.0f}%')
        print(f'     –ü–ª–µ—á–µ: {asset.leverage}x')
        print(f'     –û—Ä–¥–µ—Ä–∏: {len(asset.order_groups)} –Ω–∞–ø—Ä—è–º–∫—ñ–≤')
        total_position_size += asset.position_size_pct
        
        # –î–µ—Ç–∞–ª—å–Ω—ñ —Ü—ñ–Ω–∏
        for direction, group in asset.order_groups.items():
            print(f'       {direction}: trigger ${group.trigger_price}, SL ${group.stop_loss}')
    
    print(f'   –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ–π: {total_position_size*100:.0f}%')
    print()
    
    # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞—Ä–∂—ñ
    print('3Ô∏è‚É£ –ü–ï–†–ï–í–Ü–†–ö–ê –ú–ê–†–ñ–Ü')
    print('-'*30)
    
    total_margin = 0
    for asset in plan.active_assets:
        margin_req = asset.position_size_pct / asset.leverage
        total_margin += margin_req
        print(f'   {asset.symbol}: {asset.position_size_pct*100:.0f}% / {asset.leverage} = {margin_req*100:.1f}%')
    
    margin_limit = plan.global_settings.margin_limit_pct
    print(f'   –ó–∞–≥–∞–ª—å–Ω–∞ –º–∞—Ä–∂–∞: {total_margin*100:.1f}%')
    print(f'   –õ—ñ–º—ñ—Ç –º–∞—Ä–∂—ñ: {margin_limit*100:.0f}%')
    
    if total_margin <= margin_limit:
        print('   ‚úÖ Margin check PASSED')
    else:
        print('   ‚ùå Margin check FAILED - –ü–ï–†–ï–í–ò–©–ï–ù–ù–Ø!')
        return False
    print()
    
    # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∏–∑–∏–∫—É
    print('4Ô∏è‚É£ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –†–ò–ó–ò–ö–£')
    print('-'*30)
    
    print(f'   Risk Budget: {plan.risk_budget*100:.1f}%')
    print(f'   Max Portfolio Risk: {plan.global_settings.max_portfolio_risk*100:.1f}%')
    print(f'   Emergency Stop Loss: {plan.global_settings.emergency_stop_loss*100:.1f}%')
    
    if plan.risk_budget == plan.global_settings.max_portfolio_risk:
        print('   ‚úÖ –†–∏–∑–∏–∫–∏ —É–∑–≥–æ–¥–∂–µ–Ω—ñ')
    else:
        print('   ‚ö†Ô∏è –†–∏–∑–∏–∫–∏ –ù–ï —É–∑–≥–æ–¥–∂–µ–Ω—ñ')
    print()
    
    # 5. –ß–∞—Å–æ–≤—ñ —Ñ–∞–∑–∏
    print('5Ô∏è‚É£ –¢–û–†–ì–û–í–Ü –§–ê–ó–ò')
    print('-'*30)
    
    for phase_name, phase in plan.trade_phases.items():
        print(f'   {phase.time}: {phase.description}')
    print()
    
    # 6. –¢–µ—Å—Ç Engine
    print('6Ô∏è‚É£ –¢–ï–°–¢ ENGINE')
    print('-'*30)
    
    load_dotenv()
    use_testnet = os.getenv('BINANCE_TESTNET', 'true').lower() == 'true'
    
    if use_testnet:
        api_key = os.getenv('BINANCE_TESTNET_API_KEY', 'test')
        api_secret = os.getenv('BINANCE_TESTNET_SECRET', 'test')
    else:
        api_key = os.getenv('BINANCE_API_KEY', 'test')
        api_secret = os.getenv('BINANCE_SECRET', 'test')
    
    try:
        notifier = TelegramNotifier('', '')
        journal = TradingJournal()
        exchange = BinanceFuturesConnector(api_key, api_secret, testnet=use_testnet)
        
        engine = Engine(parser, exchange, notifier, journal)
        
        print('   –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Engine...')
        if engine._initial_setup():
            print('   ‚úÖ Engine —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π')
            print('   ‚úÖ Margin guard –ø—Ä–æ–π—à–æ–≤')
            print('   ‚úÖ –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –≥–æ—Ç–æ–≤—ñ')
        else:
            print('   ‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Engine')
            return False
            
    except AssertionError as e:
        print(f'   üö® MARGIN GUARD –°–ü–†–ê–¶–Æ–í–ê–í: {e}')
        return False
    except Exception as e:
        print(f'   ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ Engine: {e}')
        return False
    
    print()
    
    # 7. Flash-drop —Ç—Ä–∏–≥–µ—Ä
    print('7Ô∏è‚É£ –ó–ê–•–ò–°–ù–Ü –ú–ï–•–ê–ù–Ü–ó–ú–ò')
    print('-'*30)
    
    flash_drop = plan.risk_triggers.get('flash_drop')
    if flash_drop:
        print(f'   Flash-drop: {flash_drop.threshold_pct*100:.1f}% -> {flash_drop.action}')
        print('   ‚úÖ Flash-drop –∑–∞—Ö–∏—Å—Ç –∞–∫—Ç–∏–≤–Ω–∏–π')
    else:
        print('   ‚ùå Flash-drop –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π')
    
    print('   ‚úÖ Kill-switch: -2.5%')
    print('   ‚úÖ Individual Stop-Loss –Ω–∞ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó')
    print('   ‚úÖ Free-Margin Guard: 20%')
    print()
    
    # 8. –ü—ñ–¥—Å—É–º–æ–∫
    print('8Ô∏è‚É£ –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø')
    print('-'*30)
    
    print('‚úÖ –ü–õ–ê–ù –ü–û–í–ù–Ü–°–¢–Æ –ì–û–¢–û–í–ò–ô!')
    print('‚úÖ –ù–æ–≤—ñ –∞–∫—Ç–∏–≤–∏: LEVERUSDT, PLAYUSDT, OMNIUSDT')
    print('‚úÖ –ú–∞—Ä–∂–∞ –ø—ñ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º')
    print('‚úÖ –í—Å—ñ –∑–∞—Ö–∏—Å–Ω—ñ —Å–∏—Å—Ç–µ–º–∏ –∞–∫—Ç–∏–≤–Ω—ñ')
    print('‚úÖ Engine —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π')
    print()
    print('üöÄ –ú–û–ñ–ù–ê –ó–ê–ü–£–°–ö–ê–¢–ò –í –†–û–ë–û–¢–£!')
    
    return True

if __name__ == '__main__':
    test_new_plan()
