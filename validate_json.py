#!/usr/bin/env python3
"""
–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ trading_plan.json
"""
import json
import sys
import os

def check_trading_plan():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å JSON —Ñ–∞–π–ª—É"""
    
    plan_file = "data/trading_plan.json"
    
    if not os.path.exists(plan_file):
        print(f"‚ùå –§–∞–π–ª {plan_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    try:
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ JSON –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ...")
        
        # –ß–∏—Ç–∞—î–º–æ –∑ UTF-8
        with open(plan_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print("‚úÖ JSON —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤–∞–ª—ñ–¥–Ω–∏–π!")
        print(f"üìã –ü–ª–∞–Ω: {data.get('plan_version', 'unknown')}")
        print(f"üìÖ –î–∞—Ç–∞: {data.get('plan_date', 'unknown')}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Å–µ–∫—Ü—ñ—ó
        required_sections = [
            'plan_date', 'plan_version', 'active_assets', 
            'global_settings', 'trade_phases', 'risk_triggers'
        ]
        
        for section in required_sections:
            if section in data:
                print(f"‚úÖ {section}")
            else:
                print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—è —Å–µ–∫—Ü—ñ—è: {section}")
        
        print(f"\nüìä –ê–∫—Ç–∏–≤—ñ–≤: {len(data.get('active_assets', []))}")
        
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå JSON –ø–æ–º–∏–ª–∫–∞: {e}")
        print(f"   –†—è–¥–æ–∫ {e.lineno}, –ø–æ–∑–∏—Ü—ñ—è {e.colno}")
        return False
    except UnicodeDecodeError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–¥—É–≤–∞–Ω–Ω—è: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = check_trading_plan()
    sys.exit(0 if success else 1)
