# trading_bot/notifications.py
# –ú–æ–¥—É–ª—å –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å —É Telegram.

import logging
import asyncio
import telegram
from telegram.constants import ParseMode

class TelegramNotifier:
    """
    –ö–ª–∞—Å –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Telegram.
    """
    def __init__(self, token: str, chat_id: str):
        self.logger = logging.getLogger(__name__)
        if not token or not chat_id:
            self.logger.warning("–¢–æ–∫–µ–Ω –∞–±–æ ID —á–∞—Ç—É –¥–ª—è Telegram –Ω–µ –Ω–∞–¥–∞–Ω–æ. –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.")
            self.bot = None
            self.chat_id = None
            return
        
        try:
            self.bot = telegram.Bot(token=token)
            self.chat_id = chat_id
            self.logger.info("Telegram Notifier —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.")
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Telegram Notifier: {e}")
            self.bot = None
            self.chat_id = None

    def _send_async_message(self, message: str):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
        async def main():
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN_V2
            )
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ asyncio.run() –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É async-—Ñ—É–Ω–∫—Ü—ñ—ó
        # –∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥—É. –¶–µ –Ω–∞–¥—ñ–π–Ω—ñ—à–µ, –Ω—ñ–∂ —Ä—É—á–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ü–∏–∫–ª–æ–º.
        try:
            asyncio.run(main())
        except Exception as e:
            # –ü–æ–º–∏–ª–∫–∞ "Event loop is closed" –º–æ–∂–µ –≤–∏–Ω–∏–∫–∞—Ç–∏ –ø—Ä–∏ —á–∞—Å—Ç–∏—Ö –≤–∏–∫–ª–∏–∫–∞—Ö –∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥—É.
            # –¶–µ –≤—ñ–¥–æ–º–∞ –ø—Ä–æ–±–ª–µ–º–∞, —è–∫—É –º–æ–∂–Ω–∞ –±–µ–∑–ø–µ—á–Ω–æ —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏, –ø–µ—Ä–µ–≤—ñ—Ä—è—é—á–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏.
            if "Event loop is closed" not in str(e):
                self.logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram: {e}")
    def send_message(self, text: str, level: str = "info"):
        """
        –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Ç.
        
        :param text: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
        :param level: –†—ñ–≤–µ–Ω—å –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ ('info', 'warning', 'critical').
        """
        if not self.bot:
            return

        icons = {
            "info": "‚ÑπÔ∏è",
            "success": "‚úÖ",
            "warning": "‚ö†Ô∏è",
            "critical": "üî•",
            "trade": "üìà"
        }
        icon = icons.get(level, "‚ÑπÔ∏è")
        
        # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è MARKDOWN_V2
        escaped_text = telegram.helpers.escape_markdown(text, version=2)
        message = f"*{icon} {level.upper()}*\n\n{escaped_text}"

        self._send_async_message(message)
