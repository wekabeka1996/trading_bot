# trading_bot/telegram_bot.py
# Telegram –±–æ—Ç –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ—Ä–≥–∞–º–∏ —Ç–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—î—é –ª–æ–≥—ñ–≤.

import logging
import asyncio
import threading
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import json
import os
import re
from datetime import datetime, timedelta
from collections import defaultdict
import pytz
from .telegram_config import TelegramConfig
from .telegram_analytics import TelegramAnalytics


class TradingTelegramBot:
    """
    –ë–µ–∑–ø–µ—á–Ω–∏–π Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ—Ä–≥–∞–º–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–≤.
    """
    def __init__(self, config: TelegramConfig, engine):
        self.logger = logging.getLogger(__name__)
        self.config = config
        self.engine = engine
        self.allowed_users = config.allowed_users or [int(config.chat_id)]
        
        # Rate limiting
        self.command_history = defaultdict(list)
        self.rate_limits = config.rate_limits
        
        # Analytics
        if hasattr(engine, 'journal') and hasattr(engine, 'exchange'):
            self.analytics = TelegramAnalytics(engine.journal, engine.exchange)
        else:
            self.analytics = None
        
        self.application = None
        self.bot_thread = None
        self.running = False
        self.message_queue = asyncio.Queue()
        self.queue_worker_task = None
        
        if not self.config.token or not self.config.chat_id:
            self.logger.warning("–¢–æ–∫–µ–Ω –∞–±–æ ID —á–∞—Ç—É –¥–ª—è Telegram –Ω–µ –Ω–∞–¥–∞–Ω–æ.")
            return
            
        self.setup_bot()

    def _is_authorized(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
        user = update.effective_user
        user_id = user.id if user else None
        if user_id is None or user_id not in self.allowed_users:
            if update.message is not None:
                asyncio.create_task(update.message.reply_text(
                    "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É"
                ))
            self.logger.warning(
                f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )
            return False
        return True

    def _check_rate_limit(self, user_id: int, command: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limit –¥–ª—è –∫–æ–º–∞–Ω–¥—ã."""
        if command not in self.rate_limits:
            return True
            
        now = datetime.now()
        minute_ago = now - timedelta(minutes=1)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        key = f"{user_id}_{command}"
        self.command_history[key] = [
            timestamp for timestamp in self.command_history[key]
            if timestamp > minute_ago
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.command_history[key]) >= self.rate_limits[command]:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.command_history[key].append(now)
        return True

    def _log_command(self, user_id: int, command: str, args: list = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã."""
        if args is None:
            args = []
        args_str = f" —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args}" if args else ""
        self.logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /{command}{args_str}"
        )

    async def global_error_handler(self, update, context):
        self.logger.error(f"Telegram error: {context.error}")
        if update and getattr(update, 'message', None):
            await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω –≤–∂–µ –ø—Ä–∞—Ü—é—î –Ω–∞–¥ —Ü–∏–º.")

    def setup_bot(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram –±–æ—Ç–∞ –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏."""
        try:
            self.application = Application.builder().token(self.config.token).build()
            
            # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self._setup_handlers()
            self.application.add_error_handler(self.global_error_handler)
            
            self.logger.info("Telegram –±–æ—Ç –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram –±–æ—Ç–∞: {e}")

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥."""
        if self.application is None:
            return
        
        # –ë–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏
        self.application.add_handler(CommandHandler('start', self.start_command))
        self.application.add_handler(CommandHandler('help', self.help_command))
        self.application.add_handler(CommandHandler('stop_trading', self.stop_trading_command))
        self.application.add_handler(CommandHandler('close_all', self.close_all_command))
        self.application.add_handler(CommandHandler('balance', self.balance_command))
        
        # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
        self.application.add_handler(CommandHandler('status', self.cmd_status))
        self.application.add_handler(CommandHandler('positions', self.cmd_positions))
        self.application.add_handler(CommandHandler('orders', self.cmd_orders))
        # –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—è–º–∏
        self.application.add_handler(CommandHandler('close', self.cmd_close))
        self.application.add_handler(CommandHandler('hedge', self.cmd_hedge))
        self.application.add_handler(CommandHandler('sl', self.cmd_set_sl))
        # –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–æ—Ç–æ–º
        self.application.add_handler(CommandHandler('pause', self.cmd_pause))
        self.application.add_handler(CommandHandler('resume', self.cmd_resume))
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        self.application.add_handler(CommandHandler('daily', self.cmd_daily_stats))
        self.application.add_handler(CommandHandler('performance', self.cmd_performance))
        # Callback queries –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
    
    # --- –ü—É—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Ç–∏–ø–æ–≤ ---
    async def cmd_orders(self, update, context):
        pass
    async def cmd_close(self, update, context):
        pass
    async def cmd_hedge(self, update, context):
        pass
    async def cmd_set_sl(self, update, context):
        pass
    async def cmd_pause(self, update, context):
        pass
    async def cmd_resume(self, update, context):
        pass
    async def cmd_daily_stats(self, update, context):
        pass
    async def cmd_performance(self, update, context):
        pass
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start."""
        if update.message is not None:
            await update.message.reply_text(
            "ü§ñ Trading Bot –∞–∫—Ç–∏–≤–Ω–∏–π!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "/stop_trading - –∑—É–ø–∏–Ω–∏—Ç–∏ —Ç–æ—Ä–≥–∏\n"
            "/close_all - –∑–∞–∫—Ä–∏—Ç–∏ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó\n"
            "/positions - –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó\n"
            "/balance - –±–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—É\n"
            "/help - –¥–æ–ø–æ–º–æ–≥–∞"
        )

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status."""
        if not self.engine:
            if update.message is not None:
                await update.message.reply_text("‚ùå Engine –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
            return
        
        try:
            status = "üü¢ –ë–æ—Ç –ø—Ä–∞—Ü—é—î\n\n"
            if hasattr(self.engine, 'plan') and self.engine.plan:
                status += f"üìã –ü–ª–∞–Ω: {self.engine.plan.plan_type}\n"
                status += f"üìÖ –î–∞—Ç–∞: {self.engine.plan.plan_date}\n"
            
            if hasattr(self.engine, 'risk_manager') and self.engine.risk_manager:
                balance = self.engine.exchange.get_total_balance()
                status += f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
            
            status += f"‚è∞ –ß–∞—Å: {datetime.now().strftime('%H:%M:%S')}"
            
            if update.message is not None:
                await update.message.reply_text(status)
        except Exception as e:
            if update.message is not None:
                await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")

    async def stop_trading_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stop_trading - –∑—É–ø–∏–Ω—è—î —Ç–æ—Ä–≥–∏."""
        if not self.engine:
            if update.message is not None:
                await update.message.reply_text("‚ùå Engine –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
            return
        
        try:
            # –ó—É–ø–∏–Ω—è—î–º–æ —Ç–æ—Ä–≥–∏
            if hasattr(self.engine, '_pause_trading'):
                self.engine._pause_trading()
            
            if update.message is not None:
                await update.message.reply_text("üõë –¢–æ—Ä–≥–∏ –∑—É–ø–∏–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram –∫–æ–º–∞–Ω–¥—É")
            self.logger.critical("–¢–æ—Ä–≥–∏ –∑—É–ø–∏–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram –∫–æ–º–∞–Ω–¥—É /stop_trading")
            
        except Exception as e:
            if update.message is not None:
                await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ —Ç–æ—Ä–≥—ñ–≤: {e}")

    async def close_all_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /close_all - –∑–∞–∫—Ä–∏–≤–∞—î –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ –æ—Ä–¥–µ—Ä–∏."""
        if not self.engine:
            if update.message is not None:
                await update.message.reply_text("‚ùå Engine –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
            return
        
        try:
            # –°–∫–∞—Å–æ–≤—É—î–º–æ –≤—Å—ñ –æ—Ä–¥–µ—Ä–∏
            if update.message is not None:
                await update.message.reply_text("üîÑ –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ—Ä–¥–µ—Ä—ñ–≤...")
            self.engine._handle_cancel_all_untriggered()
            
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó
            if update.message is not None:
                await update.message.reply_text("üîÑ –ó–∞–∫—Ä–∏—Ç—Ç—è –≤—Å—ñ—Ö –ø–æ–∑–∏—Ü—ñ–π...")
            self.engine._handle_close_all_open_positions()
            
            if update.message is not None:
                await update.message.reply_text("‚úÖ –í—Å—ñ –æ—Ä–¥–µ—Ä–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ, –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑–∞–∫—Ä–∏—Ç–æ")
            self.logger.critical("–í—Å—ñ –æ—Ä–¥–µ—Ä–∏ —Ç–∞ –ø–æ–∑–∏—Ü—ñ—ó –∑–∞–∫—Ä–∏—Ç–æ —á–µ—Ä–µ–∑ Telegram –∫–æ–º–∞–Ω–¥—É /close_all")
            
        except Exception as e:
            if update.message is not None:
                await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π: {e}")

    async def positions_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /positions - –ø–æ–∫–∞–∑—É—î –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó."""
        if not self.engine:
            if update.message is not None:
                await update.message.reply_text("‚ùå Engine –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
            return
        
        try:
            positions = self.engine.exchange.get_open_positions()
            
            if not positions:
                if update.message is not None:
                    await update.message.reply_text("üìä –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π")
                return
            
            message = "üìä –í—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó:\n\n"
            for pos in positions:
                symbol = pos['symbol']
                amount = float(pos['positionAmt'])
                pnl = float(pos['unRealizedPnl'])
                side = "LONG" if amount > 0 else "SHORT"
                
                message += f"üîπ {symbol}\n"
                message += f"   {side}: {abs(amount):.4f}\n"
                message += f"   PnL: ${pnl:.2f}\n\n"
            
            if update.message is not None:
                await update.message.reply_text(message)
            
        except Exception as e:
            if update.message is not None:
                await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π: {e}")

    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /balance - –ø–æ–∫–∞–∑—É—î –±–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—É."""
        if not self.engine:
            if update.message is not None:
                await update.message.reply_text("‚ùå Engine –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
            return
        
        try:
            total_balance = self.engine.exchange.get_total_balance()
            free_margin = self.engine.exchange.get_free_margin()
            
            message = f"üí∞ –ë–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—É:\n\n"
            message += f"üíµ –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${total_balance:.2f}\n"
            message += f"üÜì –í—ñ–ª—å–Ω–∞ –º–∞—Ä–∂–∞: ${free_margin:.2f}\n"
            
            if update.message is not None:
                await update.message.reply_text(message)
            
        except Exception as e:
            if update.message is not None:
                await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É: {e}")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–∫–∞–∑—É—î –¥–æ–ø–æ–º–æ–≥—É."""
        help_text = """
ü§ñ **Trading Bot - –î–æ–ø–æ–º–æ–≥–∞**

**–ö–æ–º–∞–Ω–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:**
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/status - –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å
/stop_trading - –∑—É–ø–∏–Ω–∏—Ç–∏ —Ç–æ—Ä–≥–∏
/close_all - –∑–∞–∫—Ä–∏—Ç–∏ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ –æ—Ä–¥–µ—Ä–∏

**–ö–æ–º–∞–Ω–¥–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:**
/positions - –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó
/balance - –±–∞–ª–∞–Ω—Å —Ä–∞—Ö—É–Ω–∫—É
/help - —Ü—è –¥–æ–ø–æ–º–æ–≥–∞

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:**
‚Ä¢ –í—Å—ñ –ª–æ–≥–∏ –±–æ—Ç–∞ —Ç—Ä–∞–Ω—Å–ª—é—é—Ç—å—Å—è –≤ —Ü–µ–π —á–∞—Ç
‚Ä¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—Ö–æ–¥–∏/–≤–∏—Ö–æ–¥–∏ –∑ –ø–æ–∑–∏—Ü—ñ–π
‚Ä¢ –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ —Ä–∏–∑–∏–∫–∏
‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏
        """
        if update.message is not None:
            await update.message.reply_text(help_text)

    def start_bot(self):
        """–ó–∞–ø—É—Å–∫–∞—î Telegram –±–æ—Ç–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ."""
        if not self.application:
            return
        
        self.running = True
        self.bot_thread = threading.Thread(target=self._run_bot, daemon=True)
        self.bot_thread.start()
        self.logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ")

    def _run_bot(self):
        """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—ñ."""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self._bot_main())
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Telegram –±–æ—Ç–∞: {e}")

    async def _bot_main(self):
        """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –±–æ—Ç–∞."""
        try:
            if self.application and hasattr(self.application, 'initialize'):
                await self.application.initialize()
            if self.application and hasattr(self.application, 'start'):
                await self.application.start()
            if self.application and hasattr(self.application, 'updater') and self.application.updater is not None and hasattr(self.application.updater, 'start_polling'):
                await self.application.updater.start_polling()
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫
            if self.application and hasattr(self.application, 'bot') and hasattr(self.application.bot, 'send_message'):
                await self.application.bot.send_message(
                    chat_id=self.config.chat_id,
                    text="üöÄ Trading Bot –∑–∞–ø—É—â–µ–Ω–æ! –õ–æ–≥–∏ –±—É–¥—É—Ç—å —Ç—Ä–∞–Ω—Å–ª—é–≤–∞—Ç–∏—Å—è –≤ —Ü–µ–π —á–∞—Ç."
                )
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–æ—Ä–∫–µ—Ä –¥–ª—è —á–µ—Ä–≥–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            self.queue_worker_task = asyncio.create_task(self._message_queue_worker())
            # –¢—Ä–∏–º–∞—î–º–æ –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∏–º
            while self.running:
                await asyncio.sleep(1)
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–±–æ—Ç–∏ Telegram –±–æ—Ç–∞: {e}")
        finally:
            if self.application and hasattr(self.application, 'stop'):
                await self.application.stop()
            if self.queue_worker_task:
                self.queue_worker_task.cancel()

    async def _message_queue_worker(self):
        while self.running:
            try:
                msg, level = await self.message_queue.get()
                await self._send_log_message_actual(msg, level)
                await asyncio.sleep(0.5)  # –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–µ—Ä–≥–∏: {e}")

    async def send_log_message(self, message: str, level: str = "info"):
        """–ù–∞–¥—Å–∏–ª–∞—î –ª–æ–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram."""
        if not self.application or not self.running:
            return
        await self.message_queue.put((message, level))

    def _escape_markdown(self, text: str) -> str:
        """–ï–∫—Ä–∞–Ω—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è Markdown."""
        # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–∏–º–≤–æ–ª–∏ —è–∫—ñ –º–æ–∂—É—Ç—å –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É–≤–∞—Ç–∏ –∑ Markdown
        escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        for char in escape_chars:
            text = text.replace(char, f'\\{char}')
        return text

    async def _send_log_message_actual(self, message: str, level: str = "info"):
        icons = {
            "DEBUG": "üîç",
            "INFO": "‚ÑπÔ∏è",
            "WARNING": "‚ö†Ô∏è",
            "ERROR": "‚ùå",
            "CRITICAL": "üî•"
        }
        icon = icons.get(level.upper(), "‚ÑπÔ∏è")
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # –ï–∫—Ä–∞–Ω—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ Markdown
        formatted_message = f"{icon} {timestamp} {message}"
        
        try:
            if self.application and hasattr(self.application, 'bot') and self.application.bot:
                await self.application.bot.send_message(
                    chat_id=self.config.chat_id,
                    text=formatted_message
                    # –í–∏–º–∏–∫–∞—î–º–æ parse_mode –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
                )
        except Exception as e:
            pass

    def send_log_sync(self, message: str, level: str = "info"):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–æ–≥—ñ–≤."""
        if not self.application or not self.running:
            return
        try:
            loop = asyncio.get_event_loop()
            asyncio.run_coroutine_threadsafe(
                self.send_log_message(message, level),
                loop
            )
        except Exception:
            pass

    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."""
        if not self._is_authorized(update):
            return
            
        status = self._collect_system_status()
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='refresh_status')],
            [InlineKeyboardButton("üìä –ü–æ–∑–∏—Ü—ñ—ó", callback_data='show_positions')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message is not None:
            await update.message.reply_text(
                status,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
    
    def _collect_system_status(self) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏—Å—Ç–µ–º—ã."""
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        connection_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if self.engine.exchange.check_connection() else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
        
        # –ö–∞–ø–∏—Ç–∞–ª
        account_info = self.engine.exchange.get_account_summary()
        if account_info:
            balance = account_info['total_balance']
            free_margin = account_info['free_margin']
            margin_usage = (1 - free_margin/balance) * 100 if balance > 0 else 0
        else:
            balance = free_margin = margin_usage = 0
            
        # –ü–æ–∑–∏—Ü—ñ—ó
        positions = self.engine.exchange.get_position_information()
        active_positions = [p for p in positions if float(p['positionAmt']) != 0]
        total_pnl = sum(float(p.get('unrealizedProfit', 0)) for p in active_positions)
        
        # –ü–ª–∞–Ω
        plan_status = f"{self.engine.plan.plan_type} v{self.engine.plan.plan_version}" if self.engine.plan else "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
        
        status_text = f"""
*üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏*

*–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:* {connection_status}
*–¢–æ—Ä–≥—ñ–≤–ª—è:* {"‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞" if self.engine.trading_paused else "‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–Ω–∞"}
*–ü–ª–∞–Ω:* {plan_status}

*üí∞ –†–∞—Ö—É–Ω–æ–∫:*
‚Ä¢ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USD
‚Ä¢ –í—ñ–ª—å–Ω–∞ –º–∞—Ä–∂–∞: {free_margin:.2f} USD
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–∞—Ä–∂—ñ: {margin_usage:.1f}%

*üìà –ü–æ–∑–∏—Ü—ñ—ó:* {len(active_positions)}
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π PnL: {total_pnl:+.2f} USD

*üïê –ß–∞—Å:* {datetime.now(pytz.timezone('Europe/Kiev')).strftime('%H:%M:%S')}
        """
        return status_text.strip()
    
    async def cmd_positions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /positions - –¥–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –æ –ø–æ–∑–∏—Ü—ñ—è—Ö."""
        if not self._is_authorized(update):
            return
            
        positions = self.engine.exchange.get_position_information()
        active_positions = [p for p in positions if float(p['positionAmt']) != 0]
        
        if not active_positions:
            if update.message is not None:
                await update.message.reply_text("üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return
            
        for pos in active_positions:
            pos_info = self._format_position_info(pos)
            keyboard = self._create_position_keyboard(pos)
            
            if update.message is not None:
                await update.message.reply_text(
                    pos_info,
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
    
    def _format_position_info(self, position: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏."""
        symbol = position.get('symbol', 'UNKNOWN')
        amount = float(position.get('positionAmt', 0))
        entry_price = float(position.get('entryPrice', 0))
        mark_price = float(position.get('markPrice', entry_price))
        pnl = float(position.get('unrealizedProfit', 0))
        pnl_pct = (pnl / (abs(amount) * entry_price)) * 100 if entry_price > 0 else 0
        
        direction = "üü¢ LONG" if amount > 0 else "üî¥ SHORT"
        
        if 'markPrice' not in position:
            self.logger.warning(f"–ü–æ–∑–∏—Ü—ñ—è {symbol} –Ω–µ –º—ñ—Å—Ç–∏—Ç—å markPrice, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è entryPrice.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–µ–¥–∂–∞
        hedge_info = ""
        if symbol in getattr(self.engine, 'managed_positions', {}):
            hedge_data = self.engine.managed_positions[symbol].get('hedge_info')
            if hedge_data and hedge_data.get('active'):
                hedge_info = f"\n*–•–µ–¥–∂:* ‚úÖ {hedge_data['symbol']}"
        
        return f"""
*{symbol}* {direction}

*–†–æ–∑–º—ñ—Ä:* {abs(amount)}
*–í—Ö—ñ–¥:* {entry_price:.4f} USD
*–ü–æ—Ç–æ—á–Ω–∞:* {mark_price:.4f} USD
*PnL:* {pnl:+.2f} USD ({pnl_pct:+.2f}%){hedge_info}
        """
    
    def _create_position_keyboard(self, position: dict) -> list:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π."""
        symbol = position['symbol']
        return [
            [
                InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏ 25%", callback_data=f'close_{symbol}_25'),
                InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏ 50%", callback_data=f'close_{symbol}_50'),
                InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏ 100%", callback_data=f'close_{symbol}_100')
            ],
            [
                InlineKeyboardButton("üõ° SL –≤ –±/—É", callback_data=f'sl_be_{symbol}'),
                InlineKeyboardButton("üìà –¢—Ä–µ–π–ª–∏–Ω–≥", callback_data=f'trailing_{symbol}')
            ]
        ]
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏."""
        query = update.callback_query
        if query is not None:
            await query.answer()
            data = query.data
            if data is not None:
                if data.startswith('close_'):
                    parts = data.split('_')
                    symbol = parts[1]
                    percentage = int(parts[2])
                    await self._handle_close_position(query, symbol, percentage)
                elif data.startswith('sl_be_'):
                    symbol = data.replace('sl_be_', '')
                    await self._handle_sl_breakeven(query, symbol)
                # –Ü —Ç–∞–∫ –¥–∞–ª—ñ –¥–ª—è —ñ–Ω—à–∏—Ö –∫–Ω–æ–ø–æ–∫
    
    async def _handle_close_position(self, query, symbol: str, percentage: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏."""
        positions = self.engine.exchange.get_position_information(symbol)
        position = next((p for p in positions if float(p['positionAmt']) != 0), None)
        
        if not position:
            await query.edit_message_text(f"‚ùå –ü–æ–∑–∏—Ü—ñ—è {symbol} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            return
            
        if percentage == 100:
            self.engine.risk_manager._close_position(position)
        else:
            self.engine.risk_manager._reduce_position(position, percentage / 100)
            
        await query.edit_message_text(
            f"‚úÖ –ü–æ–∑–∏—Ü—ñ—è {symbol} {'–∑–∞–∫—Ä–∏—Ç–∞' if percentage == 100 else f'–∑–º–µ–Ω—à–µ–Ω–∞ –Ω–∞ {percentage}%'}"
        )
    
    async def _handle_sl_breakeven(self, query, symbol: str):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ SL –≤ –±/—É (break-even)."""
        await query.edit_message_text(f"SL –¥–ª—è {symbol} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ –±–µ–∑—É–±–∏—Ç–æ–∫ (–∑–∞–≥–ª—É—à–∫–∞)")

    def stop_bot(self):
        """–ó—É–ø–∏–Ω—è—î Telegram –±–æ—Ç–∞ —Ç–∞ –≤–æ—Ä–∫–µ—Ä —á–µ—Ä–≥–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
        self.running = False
        if self.bot_thread:
            self.bot_thread.join(timeout=5)
        if hasattr(self, 'queue_worker_task') and self.queue_worker_task:
            try:
                self.queue_worker_task.cancel()
            except Exception:
                pass
        self.logger.info("Telegram –±–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
