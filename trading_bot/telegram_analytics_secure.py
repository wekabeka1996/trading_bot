"""–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è telegram_analytics.py –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –±–µ–∑–ø–µ–∫–∏."""

import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime, timedelta
import pytz
import logging


class TelegramAnalytics:
    """–ö–ª–∞—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤ –∑ –±–µ–∑–ø–µ–∫–æ—é."""
    
    def __init__(self, journal, exchange):
        self.journal = journal
        self.exchange = exchange
        self.logger = logging.getLogger(__name__)
        
    def generate_daily_report(self, date: str) -> tuple[str, BytesIO]:
        """–ì–µ–Ω–µ—Ä—É—î –¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –∑ –≥—Ä–∞—Ñ—ñ–∫–æ–º."""
        try:
            if not hasattr(self.journal, 'get_daily_summary'):
                self.logger.warning("Journal –Ω–µ –º–∞—î –º–µ—Ç–æ–¥—É get_daily_summary")
                return self._generate_empty_report(date, "Journal –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –∑–≤—ñ—Ç–∏")
                
            summary = self.journal.get_daily_summary(date)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
            if not summary or summary.get('total_trades', 0) == 0:
                report = f"""
üìä *–î–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –∑–∞ {date}*

_–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç–æ—Ä–≥—ñ–≤–ª—é –∑–∞ —Ü–µ–π –¥–µ–Ω—å_
                """
                # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –≥—Ä–∞—Ñ—ñ–∫
                chart = self._generate_empty_chart(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ {date}")
                return report.strip(), chart
            
            # –ë–µ–∑–ø–µ—á–Ω–µ –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            total_pnl = summary.get('total_pnl', 0)
            total_fees = summary.get('total_fees', 0)
            net_profit = total_pnl - total_fees
            roi = summary.get('roi', 0)
            
            total_trades = summary.get('total_trades', 0)
            winning_trades = summary.get('winning_trades', 0)
            losing_trades = summary.get('losing_trades', 0)
            win_rate = summary.get('win_rate', 0)
            profit_factor = summary.get('profit_factor', 0)
            
            best_trade = summary.get('best_trade', {'symbol': 'N/A', 'pnl': 0})
            worst_trade = summary.get('worst_trade', {'symbol': 'N/A', 'pnl': 0})
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö
            if not isinstance(best_trade, dict):
                best_trade = {'symbol': 'N/A', 'pnl': 0}
            if not isinstance(worst_trade, dict):
                worst_trade = {'symbol': 'N/A', 'pnl': 0}
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –∑–≤—ñ—Ç
            report = f"""
üìä *–î–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –∑–∞ {date}*

üí∞ *–§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:*
‚îú –ó–∞–≥–∞–ª—å–Ω–∏–π PnL: ${total_pnl:.2f}
‚îú –ö–æ–º—ñ—Å—ñ—ó: ${total_fees:.2f}
‚îú –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: ${net_profit:.2f}
‚îî ROI: {roi:.2%}

üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≥–æ–¥:*
‚îú –í—Å—å–æ–≥–æ —É–≥–æ–¥: {total_trades}
‚îú –ü—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö: {winning_trades}
‚îú –ó–±–∏—Ç–∫–æ–≤–∏—Ö: {losing_trades}
‚îú Win Rate: {win_rate:.1f}%
‚îî Profit Factor: {profit_factor:.2f}

üéØ *–ù–∞–π–∫—Ä–∞—â–∞/–ù–∞–π–≥—ñ—Ä—à–∞ —É–≥–æ–¥–∞:*
‚îú –ù–∞–π–∫—Ä–∞—â–∞: {best_trade['symbol']} (${best_trade['pnl']:.2f})
‚îî –ù–∞–π–≥—ñ—Ä—à–∞: {worst_trade['symbol']} (${worst_trade['pnl']:.2f})
            """
            
            # –ì—Ä–∞—Ñ—ñ–∫ equity curve
            chart = self._generate_equity_chart(date)
            
            return report.strip(), chart
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É: {e}")
            return self._generate_empty_report(date, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
    
    def _generate_empty_report(self, date: str, reason: str) -> tuple[str, BytesIO]:
        """–ì–µ–Ω–µ—Ä—É—î –ø–æ—Ä–æ–∂–Ω—ñ–π –∑–≤—ñ—Ç –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ."""
        error_report = f"üìä *–î–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –∑–∞ {date}*\n\n‚ùå {reason}"
        error_chart = self._generate_empty_chart("–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó")
        return error_report, error_chart
    
    def _generate_equity_chart(self, date: str) -> BytesIO:
        """–ì–µ–Ω–µ—Ä—É—î –≥—Ä–∞—Ñ—ñ–∫ –∑–º—ñ–Ω–∏ –∫–∞–ø—ñ—Ç–∞–ª—É."""
        try:
            if not hasattr(self.journal, 'get_trades_dataframe'):
                return self._generate_empty_chart("–î–∞–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
                
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –∂—É—Ä–Ω–∞–ª—É
            trades_df = self.journal.get_trades_dataframe(date)
            
            if trades_df is None or trades_df.empty:
                return self._generate_empty_chart(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ {date}")
            
            # –ë—É–¥—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
            fig, ax = plt.subplots(figsize=(10, 6))
            
            # –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∏–π PnL
            trades_df['cumulative_pnl'] = trades_df['pnl'].cumsum()
            
            # –ì—Ä–∞—Ñ—ñ–∫
            final_pnl = trades_df['cumulative_pnl'].iloc[-1]
            color = 'green' if final_pnl > 0 else 'red'
            
            ax.plot(trades_df.index, trades_df['cumulative_pnl'], 
                   linewidth=2, color=color)
            ax.fill_between(trades_df.index, trades_df['cumulative_pnl'], 
                           alpha=0.3, color=color)
            
            # –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
            ax.set_title(f'Equity Curve - {date}', fontsize=14, fontweight='bold')
            ax.set_xlabel('–ß–∞—Å')
            ax.set_ylabel('Cumulative PnL ($)')
            ax.grid(True, alpha=0.3)
            
            # –î–æ–¥–∞—î–º–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É –ª—ñ–Ω—ñ—é –Ω–∞ –Ω—É–ª—ñ
            ax.axhline(y=0, color='black', linestyle='-', alpha=0.3)
        
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥—Ä–∞—Ñ—ñ–∫—É: {e}")
            return self._generate_empty_chart("–ü–æ–º–∏–ª–∫–∞ –≥—Ä–∞—Ñ—ñ–∫—É")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ BytesIO
        buf = BytesIO()
        plt.tight_layout()
        plt.savefig(buf, format='png', dpi=150)
        buf.seek(0)
        plt.close()
        
        return buf
    
    def _generate_empty_chart(self, message: str) -> BytesIO:
        """–ì–µ–Ω–µ—Ä—É—î –ø–æ—Ä–æ–∂–Ω—ñ–π –≥—Ä–∞—Ñ—ñ–∫ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º."""
        try:
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.text(0.5, 0.5, message, 
                   ha='center', va='center', transform=ax.transAxes,
                   fontsize=12, bbox=dict(boxstyle="round", facecolor='wheat'))
            ax.set_title('Trading Analytics', fontsize=14, fontweight='bold')
            ax.set_xlim(0, 1)
            ax.set_ylim(0, 1)
            ax.set_xticks([])
            ax.set_yticks([])
            
            buf = BytesIO()
            plt.tight_layout()
            plt.savefig(buf, format='png', dpi=150)
            buf.seek(0)
            plt.close()
            
            return buf
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É: {e}")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π BytesIO –æ–±'—î–∫—Ç
            return BytesIO(b"PNG error")
    
    def generate_performance_report(self, days: int = 7) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç –ø—Ä–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ –ø–µ—Ä—ñ–æ–¥."""
        try:
            end_date = datetime.now(pytz.timezone('Europe/Kiev'))
            start_date = end_date - timedelta(days=days)
            
            # –ó–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_pnl = 0
            total_trades = 0
            winning_trades = 0
            
            for i in range(days):
                date_str = (start_date + timedelta(days=i)).strftime('%Y-%m-%d')
                try:
                    summary = self.journal.get_daily_summary(date_str)
                    if summary:
                        total_pnl += summary.get('total_pnl', 0)
                        total_trades += summary.get('total_trades', 0)
                        winning_trades += summary.get('winning_trades', 0)
                except Exception as e:
                    self.logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞ {date_str}: {e}")
                    continue
            
            win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
            avg_daily_pnl = total_pnl / days
            
            report = f"""
üìà *–ó–≤—ñ—Ç –∑–∞ {days} –¥–Ω—ñ–≤*

*–ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:*
‚îú –ó–∞–≥–∞–ª—å–Ω–∏–π PnL: ${total_pnl:.2f}
‚îú –°–µ—Ä–µ–¥–Ω—ñ–π –¥–µ–Ω–Ω–∏–π PnL: ${avg_daily_pnl:.2f}
‚îú –í—Å—å–æ–≥–æ —É–≥–æ–¥: {total_trades}
‚îî Win Rate: {win_rate:.1f}%

*–ê–Ω–∞–ª—ñ–∑ –ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è:*
{self._analyze_by_weekday(start_date, end_date)}

*–ê–Ω–∞–ª—ñ–∑ –ø–æ —á–∞—Å—É –¥–æ–±–∏:*
{self._analyze_by_hour(start_date, end_date)}
            """
            
            return report.strip()
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: {e}")
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É –∑–∞ {days} –¥–Ω—ñ–≤"
    
    def _analyze_by_weekday(self, start_date: datetime, end_date: datetime) -> str:
        """–ê–Ω–∞–ª—ñ–∑ –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ –ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è."""
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        return "‚îú –ü–Ω-–ü—Ç: –û—Å–Ω–æ–≤–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n‚îî –°–±-–ù–¥: –ó–Ω–∏–∂–µ–Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å"
    
    def _analyze_by_hour(self, start_date: datetime, end_date: datetime) -> str:
        """–ê–Ω–∞–ª—ñ–∑ –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ –ø–æ –≥–æ–¥–∏–Ω–∞—Ö."""
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
        return "‚îú 09:00-12:00: –í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å\n‚îî 15:00-18:00: –ê–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫–∞ —Å–µ—Å—ñ—è"
