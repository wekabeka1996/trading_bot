"""–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è Telegram-–±–æ—Ç–∞."""

import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime, timedelta
import pytz

class TelegramAnalytics:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤."""
    
    def __init__(self, journal: 'TradingJournal', exchange: 'BinanceFuturesConnector'):
        self.journal = journal
        self.exchange = exchange
        
    def generate_daily_report(self, date: str) -> tuple[str, BytesIO]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–æ–º."""
        summary = self.journal.get_daily_summary(date)
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = f"""
üìä *–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –∑–∞ {date}*

üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
‚îú –û–±—â–∏–π PnL: ${summary['total_pnl']:.2f}
‚îú –ö–æ–º–∏—Å—Å–∏–∏: ${summary.get('total_fees', 0):.2f}
‚îú –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${summary['total_pnl'] - summary.get('total_fees', 0):.2f}
‚îî ROI: {summary.get('roi', 0):.2%}

üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫:*
‚îú –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {summary['total_trades']}
‚îú –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {summary['winning_trades']}
‚îú –£–±—ã—Ç–æ—á–Ω—ã—Ö: {summary['losing_trades']}
‚îú Win Rate: {summary['win_rate']:.1f}%
‚îî Profit Factor: {summary.get('profit_factor', 0):.2f}

üéØ *–õ—É—á—à–∞—è/–•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞:*
‚îú –õ—É—á—à–∞—è: {summary.get('best_trade', 'N/A')}
‚îî –•—É–¥—à–∞—è: {summary.get('worst_trade', 'N/A')}
        """
        
        # –ì—Ä–∞—Ñ–∏–∫ equity curve
        chart = self._generate_equity_chart(date)
        
        return report.strip(), chart
    
    def _generate_equity_chart(self, date: str) -> BytesIO:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞."""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∂—É—Ä–Ω–∞–ª–∞
        trades_df = self.journal.get_trades_dataframe(date)
        
        if trades_df.empty:
            # –ü—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', 
                   ha='center', va='center', transform=ax.transAxes)
            ax.set_title(f'Equity Curve - {date}')
        else:
            # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
            fig, ax = plt.subplots(figsize=(10, 6))
            
            # –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π PnL
            trades_df['cumulative_pnl'] = trades_df['pnl'].cumsum()
            
            # –ì—Ä–∞—Ñ–∏–∫
            ax.plot(trades_df.index, trades_df['cumulative_pnl'], 
                   linewidth=2, color='green' if trades_df['cumulative_pnl'].iloc[-1] > 0 else 'red')
            ax.fill_between(trades_df.index, trades_df['cumulative_pnl'], 
                           alpha=0.3, color='green' if trades_df['cumulative_pnl'].iloc[-1] > 0 else 'red')
            
            # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
            ax.set_title(f'Equity Curve - {date}', fontsize=14, fontweight='bold')
            ax.set_xlabel('–í—Ä–µ–º—è')
            ax.set_ylabel('Cumulative PnL ($)')
            ax.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –Ω–∞ –Ω—É–ª–µ
            ax.axhline(y=0, color='black', linestyle='-', alpha=0.3)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
        buf = BytesIO()
        plt.tight_layout()
        plt.savefig(buf, format='png', dpi=150)
        buf.seek(0)
        plt.close()
        
        return buf
    
    def generate_performance_report(self, days: int = 7) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥."""
        end_date = datetime.now(pytz.timezone('Europe/Kiev'))
        start_date = end_date - timedelta(days=days)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_pnl = 0
        total_trades = 0
        winning_trades = 0
        
        for i in range(days):
            date = (start_date + timedelta(days=i)).strftime('%Y-%m-%d')
            summary = self.journal.get_daily_summary(date)
            total_pnl += summary['total_pnl']
            total_trades += summary['total_trades']
            winning_trades += summary['winning_trades']
        
        win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
        avg_daily_pnl = total_pnl / days
        
        report = f"""
üìà *–û—Ç—á–µ—Ç –∑–∞ {days} –¥–Ω–µ–π*

*–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
‚îú –û–±—â–∏–π PnL: ${total_pnl:.2f}
‚îú –°—Ä–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π PnL: ${avg_daily_pnl:.2f}
‚îú –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}
‚îî Win Rate: {win_rate:.1f}%

*–ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:*
{self._analyze_by_weekday(start_date, end_date)}

*–ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫:*
{self._analyze_by_hour(start_date, end_date)}
        """
        
        return report.strip()
    
    def _analyze_by_weekday(self, start_date: datetime, end_date: datetime) -> str:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏."""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        return "‚îú –ü–Ω-–ü—Ç: –û—Å–Ω–æ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n‚îî –°–±-–í—Å: –°–Ω–∏–∂–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"
    
    def _analyze_by_hour(self, start_date: datetime, end_date: datetime) -> str:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º."""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        return "‚îú 09:00-12:00: –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å\n‚îî 15:00-18:00: –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è"