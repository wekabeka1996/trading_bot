# –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∑ –ø–æ–≤–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
import asyncio
import sys
import os
import logging
import json
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def print_banner():
    """–ë–∞–Ω–µ—Ä —Å–∏—Å—Ç–µ–º–∏"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ê –¢–û–†–ì–û–í–ê –°–ò–°–¢–ï–ú–ê v2.0        ‚ïë
‚ïë                                                           ‚ïë
‚ïë  üìà –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –ø—ñ–¥ –ø–ª–∞–Ω –≤—ñ–¥ 21.07.2025                 ‚ïë
‚ïë  üí∞ –ü–æ—Ä—Ç—Ñ–µ–ª—å: $58 USD                                     ‚ïë
‚ïë  üéØ 6 –∞–∫—Ç–∏–≤—ñ–≤ –∑ —Ä–æ–∑—É–º–Ω–∏–º —Ä–∏–∑–∏–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º               ‚ïë
‚ïë  ‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è + –∫–æ–Ω—Ç—Ä–æ–ª—å                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

def check_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    required_files = [
        'main.py',
        'exchange.py', 
        'risk_manager.py',
        'notifications.py',
        'market_data.py',
        'config.json',
        'requirements.txt'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        logger.error(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏: {', '.join(missing_files)}")
        return False
    
    logger.info("‚úÖ –í—Å—ñ —Ñ–∞–π–ª–∏ –Ω–∞ –º—ñ—Å—Ü—ñ")
    return True

def check_config():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    try:
        with open('config.json', 'r') as f:
            config = json.load(f)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—é—á–æ–≤–∏—Ö —Å–µ–∫—Ü—ñ–π
        required_sections = ['exchange', 'risk_management', 'monitoring']
        for section in required_sections:
            if section not in config:
                logger.error(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—è —Å–µ–∫—Ü—ñ—è –≤ config.json: {section}")
                return False
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–æ—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è config.json: {e}")
        return False

def check_env_file():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env —Ñ–∞–π–ª—É"""
    if not os.path.exists('.env'):
        logger.warning("‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        create_sample_env()
        return False
    
    logger.info("‚úÖ .env —Ñ–∞–π–ª –∑–Ω–∞–π–¥–µ–Ω–æ")
    return True

def create_sample_env():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑—Ä–∞–∑–∫–∞ .env —Ñ–∞–π–ª—É"""
    env_content = """# API –∫–ª—é—á—ñ Binance
BINANCE_API_KEY=your_api_key_here
BINANCE_API_SECRET=your_secret_here
BINANCE_TESTNET=True

# Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
TELEGRAM_BOT_TOKEN=your_bot_token
TELEGRAM_CHAT_ID=your_chat_id

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–∏–∑–∏–∫—É
MAX_PORTFOLIO_RISK=2.5
EMERGENCY_STOP_LOSS=-10.0
"""
    
    with open('.env.example', 'w') as f:
        f.write(env_content)
    
    logger.info("üìù –°—Ç–≤–æ—Ä–µ–Ω–æ .env.example - —Å–∫–æ–ø—ñ—é–π—Ç–µ –≤ .env —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å")

async def test_components():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤...")
    
    try:
        # –¢–µ—Å—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        with open('config.json', 'r') as f:
            config = json.load(f)
        
        # –¢–µ—Å—Ç —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        logger.info("üìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
        from market_data import MarketDataProvider
        
        async with MarketDataProvider(config) as provider:
            btc_dom = await provider.get_btc_dominance()
            if btc_dom:
                logger.info(f"‚úÖ BTC –¥–æ–º—ñ–Ω–∞—Ü—ñ—è: {btc_dom:.2f}%")
            else:
                logger.warning("‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ BTC –¥–æ–º—ñ–Ω–∞—Ü—ñ—é")
        
        # –¢–µ—Å—Ç —Å–ø–æ–≤—ñ—â–µ–Ω—å
        if config.get('notifications', {}).get('telegram', {}).get('enabled'):
            logger.info("üì± –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Telegram —Å–ø–æ–≤—ñ—â–µ–Ω—å...")
            from notifications import NotificationManager
            
            notifier = NotificationManager(config['notifications'])
            await notifier.send_telegram_message("ü§ñ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ - –≤—Å–µ –ø—Ä–∞—Ü—é—î!")
        
        logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return False

async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        from main import TradingBot
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        bot = TradingBot()
        
        await bot.start()
        
    except KeyboardInterrupt:
        logger.info("üë§ –ó—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)

def show_startup_checklist():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —á–µ–∫-–ª–∏—Å—Ç –∑–∞–ø—É—Å–∫—É"""
    checklist = """
üìã –ß–ï–ö-–õ–ò–°–¢ –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú:

‚úÖ 1. API –∫–ª—é—á—ñ Binance –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤ .env
‚úÖ 2. –£–≤—ñ–º–∫–Ω–µ–Ω–æ testnet –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
‚úÖ 3. –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ Telegram –±–æ—Ç–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
‚úÖ 4. –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ —Ä–æ–∑–º—ñ—Ä–∏ –ø–æ–∑–∏—Ü—ñ–π
‚úÖ 5. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∏
‚úÖ 6. –ì–æ—Ç–æ–≤–æ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É

‚ö†Ô∏è  –í–ê–ñ–õ–ò–í–û:
- –°–ø–æ—á–∞—Ç–∫—É —Ç–µ—Å—Ç—É–π—Ç–µ –Ω–∞ TESTNET
- –ü–æ—á–Ω—ñ—Ç—å –∑ –º–∞–ª–∏—Ö —Å—É–º
- –ü–æ—Å—Ç—ñ–π–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä—å—Ç–µ –ø–æ–∑–∏—Ü—ñ—ó
- –ú–∞—î—Ç–µ –µ–∫—Å—Ç—Ä–µ–Ω–∏–π –ø–ª–∞–Ω –≤–∏—Ö–æ–¥—É

üí° –î–ª—è –≤–µ–±-–¥–∞—à–±–æ—Ä–¥—É: streamlit run dashboard.py
    """
    print(checklist)

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print_banner()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
    if not check_files():
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ó–∞–ø—É—Å—Ç—ñ—Ç—å setup.py")
        sys.exit(1)
    
    if not check_config():
        logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é")
        sys.exit(1)
    
    if not check_env_file():
        logger.error("‚ùå –ù–∞–ª–∞—à—Ç—É–π—Ç–µ .env —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        sys.exit(1)
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    components_ok = await test_components()
    if not components_ok:
        logger.warning("‚ö†Ô∏è  –î–µ—è–∫—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å –∑ –ø–æ–º–∏–ª–∫–∞–º–∏")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —á–µ–∫-–ª–∏—Å—Ç
    show_startup_checklist()
    
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø—É—Å–∫—É
    response = input("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞? (y/N): ").strip().lower()
    if response not in ['y', 'yes', '—Ç–∞–∫', '–¥']:
        logger.info("üëã –ó–∞–ø—É—Å–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        return
    
    # –û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∂–∏–º—É
    testnet_warning = input("\n‚ö†Ô∏è  –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ —â–æ —Ö–æ—á–µ—Ç–µ —Ç–æ—Ä–≥—É–≤–∞—Ç–∏ –Ω–∞ MAINNET? (testnet/MAINNET): ").strip().lower()
    if testnet_warning not in ['mainnet']:
        logger.info("üß™ –ó–∞–ø—É—Å–∫ –≤ TESTNET —Ä–µ–∂–∏–º—ñ (–±–µ–∑–ø–µ—á–Ω–æ)")
    else:
        logger.warning("üí∞ –£–í–ê–ì–ê: –ó–∞–ø—É—Å–∫ –≤ MAINNET - —Ä–µ–∞–ª—å–Ω—ñ –≥—Ä–æ—à—ñ!")
        confirm = input("–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å (YES/no): ").strip()
        if confirm != 'YES':
            logger.info("üëã –ó–∞–ø—É—Å–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–ø–µ–∫–∏")
            return
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await start_bot()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)
