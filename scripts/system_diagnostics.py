"""
üîß TRADING SYSTEM DIAGNOSTICS
–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
"""

import asyncio
import logging
from datetime import datetime
from logging_setup import setup_logging, get_logger

setup_logging()
logger = get_logger(__name__)

async def run_system_diagnostics():
    """–ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º–∏"""
    
    logger.info("="*60)
    logger.info("[DIAGNOSTICS] –ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏")
    logger.info("="*60)
    
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    logger.info("[CHECK 1/6] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    try:
        import json
        with open('config.json', 'r') as f:
            config = json.load(f)
        logger.info("[OK] –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
        logger.info(f"  –ë—ñ—Ä–∂–∞: {config.get('exchange', {}).get('name', '–ù–ï –í–ö–ê–ó–ê–ù–û')}")
        logger.info(f"  Testnet: {config.get('exchange', {}).get('testnet', '–ù–ï –í–ö–ê–ó–ê–ù–û')}")
    except Exception as e:
        logger.error(f"[ERROR] –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: {e}")
    
    # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥—É–ª—ñ–≤
    logger.info("[CHECK 2/6] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥—É–ª—ñ–≤...")
    modules_to_check = [
        'entry_engine', 'oco_manager', 'risk_guard', 
        'hedge_manager', 'time_guard', 'market_data'
    ]
    
    for module in modules_to_check:
        try:
            __import__(module)
            logger.info(f"[OK] –ú–æ–¥—É–ª—å {module} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        except Exception as e:
            logger.error(f"[ERROR] –ú–æ–¥—É–ª—å {module}: {e}")
    
    # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    logger.info("[CHECK 3/6] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤...")
    try:
        from main import TradingBot
        bot = TradingBot()
        
        total_weight = sum(params.weight for params in bot.trading_params.values())
        logger.info(f"[OK] –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞–≥–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {total_weight*100:.1f}%")
        
        if abs(total_weight - 1.0) > 0.01:
            logger.warning(f"[WARNING] –í–∞–≥–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ 100%: {total_weight*100:.1f}%")
        
        logger.info("[OK] –ê–∫—Ç–∏–≤–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—ñ:")
        for asset, params in bot.trading_params.items():
            size = bot.portfolio_size * params.weight
            logger.info(f"  {asset}: {params.weight*100:.1f}% (${size:.2f})")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
            if size < 10.0:
                logger.warning(f"    [WARNING] –†–æ–∑–º—ñ—Ä ${size:.2f} < $10 (–º—ñ–Ω. –¥–ª—è Binance)")
                
    except Exception as e:
        logger.error(f"[ERROR] –¢–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: {e}")
    
    # 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–Ω (—Ç–µ—Å—Ç–æ–≤–∏—Ö)
    logger.info("[CHECK 4/6] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω...")
    try:
        bot = TradingBot()
        for asset, params in bot.trading_params.items():
            price = await bot.get_current_price(params.symbol)
            if price:
                logger.info(f"[OK] {params.symbol}: ${price}")
            else:
                logger.error(f"[ERROR] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É {params.symbol}")
    except Exception as e:
        logger.error(f"[ERROR] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–Ω: {e}")
    
    # 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å–æ–≤–∏—Ö –≤—ñ–∫–æ–Ω
    logger.info("[CHECK 5/6] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å–æ–≤–∏—Ö –≤—ñ–∫–æ–Ω...")
    try:
        current_time = datetime.now().strftime("%H:%M")
        logger.info(f"[OK] –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: {current_time}")
        
        for asset, params in bot.trading_params.items():
            if bot.is_entry_time_valid(current_time, params):
                logger.info(f"[OK] {asset}: —á–∞—Å –≤—Ö–æ–¥—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π")
            else:
                logger.info(f"[INFO] {asset}: —á–∞—Å –≤—Ö–æ–¥—É –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π ({params.entry_time_start}-{params.entry_time_end})")
                
    except Exception as e:
        logger.error(f"[ERROR] –ß–∞—Å–æ–≤—ñ –≤—ñ–∫–Ω–∞: {e}")
    
    # 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∏–∑–∏–∫-–ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    logger.info("[CHECK 6/6] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∏–∑–∏–∫-–ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤...")
    try:
        max_leverage = max(params.max_leverage for params in bot.trading_params.values())
        avg_leverage = sum(params.max_leverage for params in bot.trading_params.values()) / len(bot.trading_params)
        
        logger.info(f"[OK] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –ø–ª–µ—á–µ: {max_leverage}x")
        logger.info(f"[OK] –°–µ—Ä–µ–¥–Ω—î –ø–ª–µ—á–µ: {avg_leverage:.1f}x")
        
        if max_leverage > 5.0:
            logger.warning(f"[WARNING] –í–∏—Å–æ–∫–µ –ø–ª–µ—á–µ: {max_leverage}x")
            
        logger.info(f"[OK] –•–µ–¥–∂ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç: Œ≤={bot.hedge_config['beta']}")
        
    except Exception as e:
        logger.error(f"[ERROR] –†–∏–∑–∏–∫-–ø–∞—Ä–∞–º–µ—Ç—Ä–∏: {e}")
    
    logger.info("="*60)
    logger.info("[DIAGNOSTICS] –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    logger.info("="*60)

def run_quick_test():
    """–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π"""
    logger.info("[QUICK_TEST] –ó–∞–ø—É—Å–∫ —à–≤–∏–¥–∫–æ–≥–æ —Ç–µ—Å—Ç—É...")
    
    try:
        # –¢–µ—Å—Ç –ª–æ–≥—É–≤–∞–Ω–Ω—è
        logger.info("[TEST] –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
        logger.warning("[TEST] –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î") 
        logger.error("[TEST] –ü–æ–º–∏–ª–∫–∏ –ø—Ä–∞—Ü—é—é—Ç—å")
        
        # –¢–µ—Å—Ç —ñ–º–ø–æ—Ä—Ç—ñ–≤
        from main import TradingBot, TradingParams
        logger.info("[TEST] –û—Å–Ω–æ–≤–Ω—ñ –∫–ª–∞—Å–∏ —ñ–º–ø–æ—Ä—Ç—É—é—Ç—å—Å—è")
        
        # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
        bot = TradingBot()
        logger.info("[TEST] TradingBot —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è")
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–∏—Ö –º–µ—Ç–æ–¥—ñ–≤
        current_time = datetime.now().strftime("%H:%M")
        params = list(bot.trading_params.values())[0]
        is_valid = bot.is_entry_time_valid(current_time, params)
        logger.info(f"[TEST] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É: {is_valid}")
        
        logger.info("[QUICK_TEST] –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"[QUICK_TEST] –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è: {e}")
        return False

if __name__ == "__main__":
    print("üîß –ó–∞–ø—É—Å–∫ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏...")
    
    # –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç
    if run_quick_test():
        print("‚úÖ –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤")
        
        # –ü–æ–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        print("üîç –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")
        asyncio.run(run_system_diagnostics())
        print("‚úÖ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    else:
        print("‚ùå –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤ –ª–æ–≥–∞—Ö")
