# main.py
# –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞.
"""–ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞."""

import os
import logging
from dotenv import load_dotenv

# --- –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ –Ω–∞—à–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É ---
from trading_bot.logger_config import setup_logger
from trading_bot.exchange_connector import BinanceFuturesConnector
from trading_bot.plan_parser import PlanParser
from trading_bot.engine import Engine
from trading_bot.notifications import TelegramNotifier
from trading_bot.journal import TradingJournal
from trading_bot.telegram_bot import TradingTelegramBot
from trading_bot.telegram_config import TelegramConfig
from trading_bot.logger_config import TelegramLogHandler


def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞.
    """
    # 1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞
    setup_logger()

    # 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ .env —Ñ–∞–π–ª—É
    load_dotenv()
    use_testnet = os.getenv("BINANCE_TESTNET", "false").lower() == "true"
    
    # –í–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫–ª—é—á—ñ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∂–∏–º—É
    if use_testnet:
        api_key = os.getenv("BINANCE_TESTNET_API_KEY")
        api_secret = os.getenv("BINANCE_TESTNET_SECRET")
        logging.info("üß™ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è TESTNET —Ä–µ–∂–∏–º")
    else:
        api_key = os.getenv("BINANCE_API_KEY")
        api_secret = os.getenv("BINANCE_SECRET")
        logging.warning("üí∞ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è MAINNET —Ä–µ–∂–∏–º - –†–ï–ê–õ–¨–ù–Ü –ì–†–û–®–Ü!")

    tg_token = os.getenv("TELEGRAM_BOT_TOKEN")
    tg_chat_id = os.getenv("TELEGRAM_CHAT_ID")

    if not api_key or not api_secret:
        logging.critical(
            "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ BINANCE_API_KEY –∞–±–æ BINANCE_API_SECRET "
            "—É –≤–∞—à–æ–º—É .env —Ñ–∞–π–ª—ñ."
        )
        return

    logging.info("API –∫–ª—é—á—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")

    # 3. –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —à–ª—è—Ö—É –¥–æ —Ñ–∞–π–ª—É –∑ —Ç–æ—Ä–≥–æ–≤–∏–º –ø–ª–∞–Ω–æ–º
    plan_file_path = "data/trading_plan.json"
    if not os.path.exists(plan_file_path):
        logging.critical(
            "–§–∞–π–ª –ø–ª–∞–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: %s",
            plan_file_path
        )
        os.makedirs(os.path.dirname(plan_file_path), exist_ok=True)
        with open(plan_file_path, 'w', encoding='utf-8') as f:
            f.write('{}')
        logging.warning(
            "–°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ–π %s. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –π–æ–≥–æ.",
            plan_file_path
        )
        return

    # 4. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    try:
        # –ó–≤–∏—á–∞–π–Ω–∏–π Telegram notifier
        notifier = TelegramNotifier(
            token=str(tg_token) if tg_token else "",
            chat_id=str(tg_chat_id) if tg_chat_id else ""
        )
        journal = TradingJournal()
        exchange_connector = BinanceFuturesConnector(
            api_key=api_key, api_secret=api_secret, testnet=use_testnet
        )
        plan_parser = PlanParser(plan_path=plan_file_path)
        engine = Engine(
            plan_parser=plan_parser,
            exchange_connector=exchange_connector,
            notifier=notifier,
            journal=journal
        )
        
        # 5. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞ –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏
        telegram_bot = None
        if tg_token and tg_chat_id:
            tg_config = TelegramConfig(
                token=str(tg_token),
                chat_id=str(tg_chat_id)
            )
            telegram_bot = TradingTelegramBot(
                config=tg_config,
                engine=engine
            )
            
            # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ª–æ–≥—ñ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó –≤ Telegram
            telegram_handler = TelegramLogHandler(telegram_bot)
            root_logger = logging.getLogger()
            root_logger.addHandler(telegram_handler)
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ Telegram –±–æ—Ç–∞
            telegram_bot.start_bot()
            logging.info("Telegram –±–æ—Ç –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∑–∞–ø—É—â–µ–Ω–æ")
        
    except (ValueError, TypeError) as e:
        logging.critical(
            "–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤: %s", e, exc_info=True
        )
        return

    # 6. –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    try:
        engine.run()
    finally:
        # –ó—É–ø–∏–Ω—è—î–º–æ Telegram –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ
        if telegram_bot:
            telegram_bot.stop_bot()


if __name__ == "__main__":
    main()
