#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É—î–º–æ SafeOrderManager –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
"""

import os
import sys
from dotenv import load_dotenv
import ccxt
import logging
from safe_order_manager import SafeOrderManager

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env
load_dotenv()

def test_safe_order_manager():
    """–¢–µ—Å—Ç—É—î–º–æ SafeOrderManager –∑ FIDA/USDT"""
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±—ñ—Ä–∂—É
    exchange = ccxt.binance({
        'apiKey': os.getenv('BINANCE_API_KEY'),
        'secret': os.getenv('BINANCE_SECRET_KEY'),
        'sandbox': True,  # –¢–µ—Å—Ç–Ω–µ—Ç
        'options': {
            'defaultType': 'future'  # Futures
        }
    })
    
    try:
        print("üß™ –¢–µ—Å—Ç—É—î–º–æ SafeOrderManager...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ SafeOrderManager
        safe_manager = SafeOrderManager(exchange)
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑ –º–∞–ª–µ–Ω—å–∫–∏–º –æ—Ä–¥–µ—Ä–æ–º
        symbol = 'FIDA/USDT'
        side = 'buy'
        amount = 1.0  # 1 FIDA (–º—ñ–Ω—ñ–º—É–º)
        
        print(f"\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–µ—Å—Ç—É:")
        print(f"  Symbol: {symbol}")
        print(f"  Side: {side}")
        print(f"  Amount: {amount}")
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
        result = safe_manager.create_safe_market_order_via_limit(symbol, side, amount)
        
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        if 'error' in result:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {result['error']}")
        else:
            print(f"‚úÖ –£—Å–ø—ñ—Ö!")
            print(f"  Order ID: {result.get('id')}")
            print(f"  Status: {result.get('status')}")
            print(f"  Price: ${result.get('price')}")
            print(f"  Amount: {result.get('amount')}")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_safe_order_manager()
