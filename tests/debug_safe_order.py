#!/usr/bin/env python3
"""
–î–µ–±–∞–≥ SafeOrderManager - –∑–Ω–∞—Ö–æ–¥–∏–º–æ –¥–µ None
"""

import os
import sys
from dotenv import load_dotenv
import ccxt
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env
load_dotenv()

def debug_ticker_data():
    """–î–µ–±–∞–≥—É—î–º–æ –¥–∞–Ω—ñ —Ç—ñ–∫–µ—Ä–∞ –¥–ª—è FIDA/USDT"""
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±—ñ—Ä–∂—É
    exchange = ccxt.binance({
        'apiKey': os.getenv('BINANCE_API_KEY'),
        'secret': os.getenv('BINANCE_SECRET_KEY'),
        'sandbox': True,  # –¢–µ—Å—Ç–Ω–µ—Ç
        'options': {
            'defaultType': 'future'  # Futures
        }
    })
    
    try:
        print("üîç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è FIDA/USDT...")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–∏–Ω–∫–∏
        markets = exchange.load_markets()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—ñ–∫–µ—Ä
        ticker = exchange.fetch_ticker('FIDA/USDT')
        
        print("\nüìä –î–∞–Ω—ñ —Ç—ñ–∫–µ—Ä–∞ FIDA/USDT:")
        print(f"  Last: {ticker.get('last')} (type: {type(ticker.get('last'))})")
        print(f"  Bid: {ticker.get('bid')} (type: {type(ticker.get('bid'))})")
        print(f"  Ask: {ticker.get('ask')} (type: {type(ticker.get('ask'))})")
        print(f"  BaseVolume: {ticker.get('baseVolume')} (type: {type(ticker.get('baseVolume'))})")
        print(f"  QuoteVolume: {ticker.get('quoteVolume')} (type: {type(ticker.get('quoteVolume'))})")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ None –∑–Ω–∞—á–µ–Ω–Ω—è
        none_fields = []
        for key, value in ticker.items():
            if value is None:
                none_fields.append(key)
        
        if none_fields:
            print(f"\n‚ö†Ô∏è  –ü–æ–ª—è –∑ None –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏: {none_fields}")
        else:
            print("\n‚úÖ –ñ–æ–¥–Ω–∏—Ö None –∑–Ω–∞—á–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
        # –¢–µ—Å—Ç—É—î–º–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –∑ fallback
        last_price = ticker['last']
        bid_price = ticker.get('bid') or last_price * 0.999  
        ask_price = ticker.get('ask') or last_price * 1.001  
        
        print(f"\nüßÆ –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –∑ fallback:")
        print(f"  Last: ${last_price}")
        print(f"  Bid (calc): ${bid_price}")
        print(f"  Ask (calc): ${ask_price}")
        
        # –¢–µ—Å—Ç—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é –º–Ω–æ–∂–µ–Ω–Ω—è
        try:
            test_calc = ask_price * 1.001
            print(f"  Ask * 1.001 = ${test_calc}")
            print("‚úÖ –ú–Ω–æ–∂–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î!")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–Ω–æ–∂–µ–Ω–Ω—è: {e}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_ticker_data()
