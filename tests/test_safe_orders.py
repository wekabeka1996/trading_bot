#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –ë–ï–ó–ü–ï–ß–ù–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê –û–†–î–ï–†–Ü–í
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è SafeOrderManager –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ PERCENT_PRICE —Ç–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—é
"""

import logging
from exchange_manager import ExchangeManager
from safe_order_manager import SafeOrderManager
from logging_setup import setup_logging, get_logger

setup_logging()
logger = get_logger(__name__)

def test_safe_order_manager():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤"""
    
    print("üß™ –¢–ï–°–¢ –ë–ï–ó–ü–ï–ß–ù–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê –û–†–î–ï–†–Ü–í")
    print("=" * 50)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    exchange_manager = ExchangeManager()
    if not exchange_manager.initialize():
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±—ñ—Ä–∂—ñ")
        return False
    
    print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ—Ä–∂—ñ —É—Å–ø—ñ—à–Ω–µ")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∑–ø–µ—á–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
    safe_manager = SafeOrderManager(exchange_manager.exchange)
    
    # –¢–µ—Å—Ç–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ (–º–∞–ª—ñ —Å—É–º–∏ –¥–ª—è –±–µ–∑–ø–µ–∫–∏)
    test_symbols = ["BTC/USDT", "PENDLE/USDT", "DIA/USDT"]
    test_amount_usd = 10.0  # $10 –¥–ª—è —Ç–µ—Å—Ç—É
    
    for symbol in test_symbols:
        print(f"\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è {symbol}")
        print("-" * 30)
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–∏–Ω–æ–∫
            if not safe_manager.load_market_info(symbol):
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è {symbol}")
                continue
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—ñ–∫–µ—Ä
            ticker = safe_manager.tickers[symbol]
            current_price = ticker['last']
            amount = test_amount_usd / current_price
            
            print(f"üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${current_price}")
            print(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {amount:.6f}")
            print(f"üíµ –ù–æ—Ç—ñ–æ–Ω–∞–ª: ${amount * current_price:.2f}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å
            liquidity_check = safe_manager.check_liquidity(symbol, test_amount_usd)
            print(f"üèä –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å: {'‚úÖ –û–ö' if liquidity_check['valid'] else '‚ùå ' + liquidity_check['reason']}")
            
            if liquidity_check["valid"]:
                print(f"  24h Volume: ${liquidity_check['volume_24h']:,.0f}")
                print(f"  Order %: {liquidity_check['order_percent']:.4f}%")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –±–µ–∑–ø–µ—á–Ω—É —Ü—ñ–Ω—É
            safe_price = safe_manager.get_safe_price(symbol, "buy")
            if safe_price:
                print(f"üõ°Ô∏è –ë–µ–∑–ø–µ—á–Ω–∞ —Ü—ñ–Ω–∞: ${safe_price}")
                price_diff = ((safe_price - current_price) / current_price) * 100
                print(f"  –†—ñ–∑–Ω–∏—Ü—è: {price_diff:+.2f}%")
            else:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–µ–∑–ø–µ—á–Ω—É —Ü—ñ–Ω—É")
            
            # –¢–ï–°–¢–û–í–ò–ô –û–†–î–ï–† (–ó–ê–ö–û–ú–ï–ù–¢–û–í–ê–ù–û –î–õ–Ø –ë–ï–ó–ü–ï–ö–ò)
            print("üö´ –†–µ–∞–ª—å–Ω–∏–π –æ—Ä–¥–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω–æ (—Ç–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º)")
            # order_result = safe_manager.create_safe_market_order_via_limit(symbol, "buy", amount)
            # if "error" not in order_result:
            #     print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –æ—Ä–¥–µ—Ä —É—Å–ø—ñ—à–Ω–∏–π: {order_result.get('id')}")
            # else:
            #     print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {order_result['error']}")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è {symbol}: {e}")
            import traceback
            traceback.print_exc()
    
    print(f"\n{'='*50}")
    print("üèÅ –¢–µ—Å—Ç –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    return True

if __name__ == "__main__":
    test_safe_order_manager()
