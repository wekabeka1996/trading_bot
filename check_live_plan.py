#!/usr/bin/env python3
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –ø–ª–∞–Ω—É –∑ live —Ü—ñ–Ω–∞–º–∏

from trading_bot.plan_parser import PlanParser

def check_live_price_plan():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–ª–∞–Ω –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ live —Ü—ñ–Ω"""
    
    print('üìä –ü–ï–†–ï–í–Ü–†–ö–ê –ü–õ–ê–ù–£ –ó LIVE –¶–Ü–ù–ê–ú–ò')
    print('='*50)
    
    parser = PlanParser('data/trading_plan.json')
    if not parser.load_and_validate():
        print('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –ø–ª–∞–Ω—É')
        return
        
    plan = parser.plan
    print('‚úÖ –ü–ª–∞–Ω –≤–∞–ª—ñ–¥–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!')
    print()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–∏–∑–∏–∫—É
    print('üìä –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –†–ò–ó–ò–ö–£:')
    print(f'   Risk Budget: {plan.risk_budget*100:.1f}%')
    print(f'   Max Portfolio Risk: {plan.global_settings.max_portfolio_risk*100:.1f}%')
    print(f'   Emergency Stop Loss: {plan.global_settings.emergency_stop_loss*100:.1f}%')
    print()
    
    # –†–æ–∑–º—ñ—Ä–∏ –ø–æ–∑–∏—Ü—ñ–π
    print('üí∞ –†–û–ó–ú–Ü–†–ò –ü–û–ó–ò–¶–Ü–ô:')
    total_position_size = 0
    for asset in plan.active_assets:
        print(f'   {asset.symbol}: {asset.position_size_pct*100:.0f}%')
        total_position_size += asset.position_size_pct
    print(f'   –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {total_position_size*100:.0f}%')
    print()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞—Ä–∂—ñ
    print('üè¶ –ü–ï–†–ï–í–Ü–†–ö–ê –ú–ê–†–ñ–Ü:')
    total_margin = sum(asset.position_size_pct / asset.leverage for asset in plan.active_assets)
    margin_limit = plan.global_settings.margin_limit_pct
    
    for asset in plan.active_assets:
        margin_req = asset.position_size_pct / asset.leverage
        print(f'   {asset.symbol}: {asset.position_size_pct*100:.0f}% / {asset.leverage} = {margin_req*100:.1f}%')
    
    print(f'   –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –º–∞—Ä–∂–∞: {total_margin*100:.1f}%')
    print(f'   –õ—ñ–º—ñ—Ç –º–∞—Ä–∂—ñ: {margin_limit*100:.0f}%')
    
    if total_margin <= margin_limit:
        print('   ‚úÖ Margin check PASSED')
    else:
        print('   ‚ùå Margin check FAILED')
    print()
    
    # –¶—ñ–Ω–∏ –∞–∫—Ç–∏–≤—ñ–≤
    print('üíµ –û–ù–û–í–õ–ï–ù–Ü –¶–Ü–ù–ò:')
    for asset in plan.active_assets:
        print(f'   {asset.symbol}:')
        for direction, group in asset.order_groups.items():
            print(f'     {direction}: trigger ${group.trigger_price}, SL ${group.stop_loss}')
    print()
    
    # Fallback
    print('üîÑ FALLBACK HEDGE:')
    fallback = plan.fallback
    print(f'   Symbol: {fallback["strategy"]["symbol"]}')
    print(f'   Size: {fallback["strategy"]["size_pct"]*100:.0f}%')
    print(f'   Side: {fallback["strategy"]["side"]}')
    print()
    
    # Flash drop
    flash_drop = plan.risk_triggers.get('flash_drop')
    if flash_drop:
        print('üö® FLASH-DROP –ó–ê–•–ò–°–¢:')
        print(f'   –ü–æ—Ä—ñ–≥: {flash_drop.threshold_pct*100:.1f}%')
        print(f'   –î—ñ—è: {flash_drop.action}')
        print('   ‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π')
    print()
    
    print('üìã –ü–Ü–î–°–£–ú–û–ö –ó–ú–Ü–ù:')
    print('   ‚úÖ Risk budget –∑–Ω–∏–∂–µ–Ω–æ –¥–æ 2.5%')
    print('   ‚úÖ –ü–æ–∑–∏—Ü—ñ—ó –∑–º–µ–Ω—à–µ–Ω–æ: 28%/32%/28%')
    print('   ‚úÖ –ú–∞—Ä–∂–∞: 29.3% < 34% (OK)')
    print('   ‚úÖ ARB –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ live —Ü—ñ–Ω–∏ ~$0.395')
    print('   ‚úÖ ETH –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ live —Ü—ñ–Ω–∏ ~$3760')
    print('   ‚úÖ Fallback hedge –∑–Ω–∏–∂–µ–Ω–æ –¥–æ 12%')
    print('   ‚úÖ Flash-drop –∑–∞—Ö–∏—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ')
    print()
    print('üöÄ –ü–õ–ê–ù –ì–û–¢–û–í–ò–ô –î–õ–Ø $100 –î–ï–ü–û–ó–ò–¢–£!')

if __name__ == '__main__':
    check_live_price_plan()
