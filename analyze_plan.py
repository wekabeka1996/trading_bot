#!/usr/bin/env python3
"""
–ì–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∫–æ–¥—É
"""

import logging
from datetime import datetime, timedelta
import pytz
from trading_bot.plan_parser import PlanParser
from trading_bot.engine import Engine

def analyze_trading_plan():
    """–ü–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É"""
    
    print("üîç –ì–õ–ò–ë–û–ö–ò–ô –ê–ù–ê–õ–Ü–ó –¢–û–†–ì–û–í–û–ì–û –ü–õ–ê–ù–£")
    print("=" * 50)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—É
    parser = PlanParser('data/trading_plan.json')
    if not parser.load_and_validate():
        print("‚ùå –ü–ª–∞–Ω –Ω–µ –≤–∞–ª—ñ–¥–Ω–∏–π!")
        return
        
    plan = parser.get_plan()
    if not plan:
        print("‚ùå –ü–ª–∞–Ω –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
        return
        
    print(f"‚úÖ –ü–ª–∞–Ω '{plan.plan_type}' v{plan.plan_version} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
    print(f"üìÖ –î–∞—Ç–∞ –ø–ª–∞–Ω—É: {plan.plan_date}")
    print()
    
    # –ê–Ω–∞–ª—ñ–∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤
    print("üìä –ê–ù–ê–õ–Ü–ó –ê–ö–¢–ò–í–ù–ò–• –ê–ö–¢–ò–í–Ü–í:")
    print("-" * 30)
    
    total_position_size = 0
    for i, asset in enumerate(plan.active_assets, 1):
        print(f"{i}. {asset.symbol} ({asset.strategy})")
        print(f"   üìà –ü–ª–µ—á–µ: {asset.leverage}x")
        print(f"   üí∞ –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: {asset.position_size_pct*100:.1f}%")
        print(f"   üè∑Ô∏è –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: {asset.strategy}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥—Ä—É–ø –æ—Ä–¥–µ—Ä—ñ–≤ –¥–ª—è OCO
        bullish = asset.order_groups.get("bullish")
        bearish = asset.order_groups.get("bearish") 
        
        if asset.strategy == "oco_breakout":
            if bullish and bearish:
                print(f"   ‚úÖ OCO –≥—Ä—É–ø–∏: bullish + bearish")
                print(f"      üìà BUY STOP: {bullish.trigger_price}")
                print(f"      üìâ SELL STOP: {bearish.trigger_price}")
            else:
                print(f"   ‚ùå OCO –≥—Ä—É–ø–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–∏–¥–≤—ñ –≥—Ä—É–ø–∏!")
        else:
            print(f"   ‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥—ñ—è '{asset.strategy}' –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –∫–æ–¥—ñ!")
            
        total_position_size += asset.position_size_pct
        print()
    
    print(f"üìä –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ–π: {total_position_size*100:.1f}%")
    if total_position_size > 1.0:
        print("‚ö†Ô∏è –£–í–ê–ì–ê: –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ–π > 100%!")
    print()
    
    # –ê–Ω–∞–ª—ñ–∑ —Ç–æ—Ä–≥–æ–≤–∏—Ö —Ñ–∞–∑
    print("‚è∞ –ê–ù–ê–õ–Ü–ó –¢–û–†–ì–û–í–ò–• –§–ê–ó:")
    print("-" * 25)
    
    # –°–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ —É Engine
    implemented_actions = {
        'cancel_all_untriggered': '_handle_cancel_all_untriggered',
        'close_all_positions': '_handle_close_all_open_positions',
        'close_all_open_positions': '_handle_close_all_open_positions',
        'place_all_orders': '_handle_place_all_orders',
        'verify_conditions': '_handle_verify_conditions',
        'monitor_jobless_claims': '_handle_monitor_jobless_claims',
        'place_conditional_orders': '_handle_place_conditional_orders',
        'check_arb_conditions': '_handle_check_arb_conditions',
        'check_sol_entry': '_handle_check_sol_entry'
    }
    
    for phase_name, phase in plan.trade_phases.items():
        action = phase.action
        time_str = phase.time
        description = phase.description
        
        print(f"‚è∞ {time_str} - {phase_name}")
        print(f"   üìù –û–ø–∏—Å: {description}")
        print(f"   üéØ –î—ñ—è: {action}")
        
        if action in implemented_actions:
            print(f"   ‚úÖ –†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {implemented_actions[action]}")
        elif action:
            print(f"   ‚ùå –ù–ï —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: _handle_{action}")
        else:
            print(f"   ‚ùå –î—ñ—è –Ω–µ –≤–∫–∞–∑–∞–Ω–∞!")
        print()
    
    # –ê–Ω–∞–ª—ñ–∑ —Ä–∏–∑–∏–∫-—Ç—Ä–∏–≥–µ—Ä—ñ–≤
    print("‚ö° –ê–ù–ê–õ–Ü–ó –†–ò–ó–ò–ö-–¢–†–ò–ì–ï–†–Ü–í:")
    print("-" * 25)
    
    for trigger_name, trigger in plan.risk_triggers.items():
        print(f"üö® {trigger_name}")
        print(f"   üéØ –î—ñ—è: {trigger.action}")
        print(f"   üìä –ü–æ—Ä—ñ–≥: {getattr(trigger, 'threshold', 'N/A')}")
        print(f"   üìä –ü–æ—Ä—ñ–≥ %: {getattr(trigger, 'threshold_pct', 'N/A')}")
        print(f"   ‚ùå –°—Ç–∞—Ç—É—Å: –ù–ï —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        print()
    
    # –ê–Ω–∞–ª—ñ–∑ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    print("üåê –ì–õ–û–ë–ê–õ–¨–ù–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø:")
    print("-" * 25)
    
    gs = plan.global_settings
    print(f"üíº –ú–∞–∫—Å. —Ä–∏–∑–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {gs.max_portfolio_risk*100:.1f}%")
    print(f"üõë Emergency stop-loss: {gs.emergency_stop_loss*100:.1f}%")
    print(f"üéØ –î–µ–Ω–Ω–∞ —Ü—ñ–ª—å –ø—Ä–∏–±—É—Ç–∫—É: {gs.daily_profit_target*100:.1f}%")
    print(f"üìà –ú–∞–∫—Å. –ø–æ–∑–∏—Ü—ñ–π –æ–¥–Ω–æ—á–∞—Å–Ω–æ: {gs.max_concurrent_positions}")
    print(f"üí∞ –ú–∞–∫—Å. —Å—É–º–∞ –Ω–∞ —É–≥–æ–¥—É: ${gs.max_notional_per_trade}")
    print(f"üìä –õ—ñ–º—ñ—Ç –º–∞—Ä–∂—ñ: {gs.margin_limit_pct*100:.1f}%")
    print()
    
    # –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏
    print("üö® –ö–†–ò–¢–ò–ß–ù–Ü –ü–†–û–ë–õ–ï–ú–ò:")
    print("-" * 20)
    
    problems = []
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
    for asset in plan.active_assets:
        if asset.strategy != "oco_breakout":
            problems.append(f"–°—Ç—Ä–∞—Ç–µ–≥—ñ—è '{asset.strategy}' –¥–ª—è {asset.symbol} –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–∑
    unimplemented_phases = []
    for phase_name, phase in plan.trade_phases.items():
        if phase.action and phase.action not in implemented_actions:
            unimplemented_phases.append(f"{phase_name} -> {phase.action}")
    
    if unimplemented_phases:
        problems.append(f"–ù–µ—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ñ–∞–∑–∏: {', '.join(unimplemented_phases)}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ OCO –≥—Ä—É–ø
    for asset in plan.active_assets:
        if asset.strategy == "oco_breakout":
            if not (asset.order_groups.get("bullish") and asset.order_groups.get("bearish")):
                problems.append(f"OCO –¥–ª—è {asset.symbol}: –≤—ñ–¥—Å—É—Ç–Ω—ñ bullish/bearish –≥—Ä—É–ø–∏")
    
    if problems:
        for i, problem in enumerate(problems, 1):
            print(f"{i}. ‚ùå {problem}")
    else:
        print("‚úÖ –ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ!")
    
    print()
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    print("üîÆ –ü–†–û–ì–ù–û–ó –í–ò–ö–û–ù–ê–ù–ù–Ø:")
    print("-" * 20)
    
    if not problems:
        print("‚úÖ –ü–ª–∞–Ω –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –∫–æ—Ä–µ–∫—Ç–Ω–æ")
        print("üìà –û—Ä–¥–µ—Ä–∏ –±—É–¥—É—Ç—å —Ä–æ–∑–º—ñ—â–µ–Ω—ñ –∑–∞ OCO —Å—Ç—Ä–∞—Ç–µ–≥—ñ—î—é")
        print("‚è∞ –ß–∞—Å–æ–≤—ñ —Ñ–∞–∑–∏ —Å–ø—Ä–∞—Ü—é—é—Ç—å –∑–≥—ñ–¥–Ω–æ –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º")
    else:
        print("‚ö†Ô∏è –ü–ª–∞–Ω –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è —á–∞—Å—Ç–∫–æ–≤–æ")
        print("üìà OCO –æ—Ä–¥–µ—Ä–∏ –±—É–¥—É—Ç—å —Ä–æ–∑–º—ñ—â–µ–Ω—ñ (—è–∫—â–æ —î –æ–±–∏–¥–≤—ñ –≥—Ä—É–ø–∏)")
        print("‚ùå –î–µ—è–∫—ñ —Ñ–∞–∑–∏ –±—É–¥—É—Ç—å –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω—ñ")
        print("‚ùå –î–µ—è–∫—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –Ω–µ –±—É–¥—É—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏")
    
    return len(problems) == 0

if __name__ == "__main__":
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–∏—à–∏–Ω–∏
    logging.getLogger().setLevel(logging.WARNING)
    
    success = analyze_trading_plan()
    print(f"\nüéØ –ó–ê–ì–ê–õ–¨–ù–ê –û–¶–Ü–ù–ö–ê: {'‚úÖ –ü–õ–ê–ù –ì–û–¢–û–í–ò–ô' if success else '‚ö†Ô∏è –ü–û–¢–†–Ü–ë–ù–Ü –î–û–û–ü–†–ê–¶–Æ–í–ê–ù–ù–Ø'}")
